
check:
  f = lam(x): x + 1 end
  f(1) is 2

  fun g(x): x + 2 end
  g(2) is 4

  h = lam(x,y): x - y end
  h(3,6) is -3

  j = lam(): 5 end
  j() is 5

  fun f1(a):
    b = a
    b + 1
  end

  f1(4) is 5

  rec fact = lam(x):
    if x == 0: 1
    else: x * fact(x - 1)
    end
  end
  fact(5) is 120

  block:
    fun addeven(x): if x == 0: 0 else: x + addodd(x - 1) end end
    fun addodd(x):  if x == 0: 0 else: x + addeven(x - 1) end end
    addeven(6) is 21
  end

  block:
    rec addeven = lam(x): if x == 0: 0 else: x + addodd(x - 1) end end
    rec addodd = lam(x): if x == 0: 0 else: x + addeven(x - 1) end end
    addeven(6) is 21
  end

  block:
    fun addeven(x): if x == 0: 0 else: x + addodd(x - 1) end end
    rec addodd = lam(x): if x == 0: 0 else: x + addeven(x - 1) end end
    addeven(6) is 21
  end

  block:
    rec addeven = lam(x) : if x == 0: 0 else: x + addodd(x - 1) end end
    fun addodd(x): if x == 0: 0 else: x + addeven(x - 1) end end
    addeven(6) is 21
  end
  
  
end

check "app operators":
  fun f(a): a + 1 end
  fun g(a): a + 2 end 
  2 ^ f is 3

  # work around two parsing issues, todo: fix the parsing
  # 1. 2 ^ f ^ f parses with the wrong associativity
  # 2. using parens to fix it triggers the whitespace bug
  # where it parses the 3 above and then the parens as
  # trying to call the 3 as a function.
  block: 
    (2 ^ f) ^ g is 5
  end

  f |> 2 is 3
  g |> f |> 2 is 5
  
end
