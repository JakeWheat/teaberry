check "simple anomaly":
  b == 1 raises-satisfies _ == unbound-identifier("b")
  5(1) raises-satisfies _ == not-function-value('5')

  # wrong number of args, wrong arg types
  tostring(2,3) raises-satisfies _ == function-wrong-num-args(1,2)
  f = lam(a,b,c): a + 1 end
  f(2,3) raises-satisfies _ == function-wrong-num-args(3,2)

  string-to-number(2) raises-satisfies _ == function-wrong-types([list: 'Text'],[list: 'Number'])

  # lam: arg names repeated
  lam(a,b,a): a + b end(3,4,2) raises-satisfies _ == duplicate-name('a')
  # let: arg names repeated
  let a = 3, b = 4, a = 5: a + b end raises-satisfies _ == duplicate-name('a')
  # todo: check shadow more generally

  # if -> check type isn't bool
  if 'x': 1 else: 2 end raises-satisfies _ == expected-type('Boolean', 'Text')
  # needs some more work to get the types of variants right
  if false: 1 else if nothing: 2 else: 3 end raises-satisfies _ == expected-type('Boolean', 'Variant')
  # if -> falls through with no else
  if 1 == 2: 1 else if 1 == 3: 2 end raises-satisfies _ == no-branches-satisfied
  # if with only one branch
  if 1 == 1: 1 end raises-satisfies _ == only-one-branch

  # block: an empty block gives an error
  block: end raises-satisfies _ == empty-block

  # sanity check
  block: 3 end is 3

  # let at the end of a block
  block: a = 3 end raises-satisfies _ == block-ends-with-let

  # tests for curried:
  badc = lam(a,b): a + b end
  # wrong number of args
  let g = badc(_): g(3) end raises-satisfies _ == function-wrong-num-args(2,1)

end
