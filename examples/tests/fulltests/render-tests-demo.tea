#|
rendering test results in teaberry
|#

fun map(f, lst):
  cases (List) lst:
    | empty => empty
    | link(x,xs) => block:
        link(f(x), map(f,xs))
      end
  end
where:
  map(tostring, [list: 1, 2]) is [list: "1", "2"]
  map(lam(x): x + 1 end, [list: 1, 2]) is [list: 2, 3]
end

fun reverse(l):
  fun rev(lst, a):
    cases (List) lst:
      | empty => a
      | link(x,xs) => rev(xs,link(x,a))
    end
  end
  rev(l,empty)
where:
  reverse([list:]) is [list:]
  reverse([list: 1]) is [list: 1]
  reverse([list: 1,2]) is [list: 2,1]
  reverse([list: 1,2,3,4]) is [list: 4,3,2,1]
end

fun length(lst):
  cases(List) lst:
    | empty => 0
    | link(x,xs) => 1 + length(xs)
  end
end


# partition :: (f :: (a -> Boolean), lst :: List<a>) -> {is-true :: List<a>, is-false :: List<a>}
fun partition(f, lst):
  fun partition-go(ts, fs, lst1):
    cases(List) lst1:
      | empty => {is-true: reverse(ts), is-false: reverse(fs)}
      | link(x,xs) => if f(x):
          partition-go(link(x,ts),fs,xs)
        else:
          partition-go(ts,link(x,fs),xs)
        end
    end
  end
  partition-go(empty,empty,lst)
where:
  partition(lam(e): e > 0 end, [list: -1, 1]) is
    {is-true: [list: 1], is-false: [list: -1]}
  partition(lam(e): e > 5 end, [list: -1, 1]) is
    {is-true: [list: ], is-false: [list: -1, 1]}
  partition(lam(e): e < 5 end, [list: -1, 1]) is
    {is-true: [list: -1, 1], is-false: [list: ]}
end

# possibly not right fold, haskell style
# not pyret style
fun foldr(f,z,l):
  cases(List) l:
    | empty => z
    | link(x,xs) => f(x,foldr(f,z,xs))
  end
where:
  foldr(_ + _, 0, [list: 3, 2, 1]) is 6
  foldr(_ + _, 10, [list: 3, 2, 1]) is 16
end

fun sum(lst):
  foldr(_ + _, 0, lst)
where:
  sum([list: 3, 2, 1]) is 6
  sum([list: 10, 3, 2, 1]) is 16
end

fun intercalate(sep,lst):
  cases(List) lst:
    | empty => ""
    | link(a,b) =>
      if is-link(b):
        a + sep + intercalate(sep,b)
      else:
        a
      end
  end
where:
  intercalate(",", [list:]) is ""
  intercalate(",", [list:"a"]) is "a"
  intercalate(",", [list:"a", "b"]) is "a,b"
  intercalate(",", [list:"a","b","c"]) is "a,b,c"
end

check:
  text-char-at("abc", 1) is "b"
  text-char-at("a", 0) is "a"
end

check:
  text-index-of("Pyret", "P") is 0
  text-index-of("012ðŸ¤‘45", "ðŸ¤‘") is 3
  text-index-of("ðŸ¤”ðŸ¤”ðŸ¤”", "ðŸ¤’") is -1
end


fun find-char(str,frm,c):
  tl = text-length(str)
  fun go(frm):
    if frm >= tl: -1
    else if text-char-at(str,frm) == c: frm
    else: go(frm + 1)
    end
  end
  go(frm)
where:
  find-char("Pyret", 0, "P") is 0
  find-char("012ðŸ¤‘45", 0, "ðŸ¤‘") is 3
  find-char("ðŸ¤”ðŸ¤”ðŸ¤”", 0, "ðŸ¤’") is -1
  find-char("abcabcabc", 3, "b") is 4
end

check:
  text-substring("just the first", 0, 1) is "j"
  text-substring("same index", 4, 4) is ""

  tws = "length is 12"
  text-substring(tws, 4, 6) is "th"
  text-substring(tws, text-length(tws) - 1, text-length(tws)) is "2"
  #text-substring(tws, 6, 4) raises "index"
  #text-substring(tws, 6, 13) raises "index"
  #text-substring(tws, 13, 6) raises "index"
  #text-substring(tws, -1, 10) raises "index"
end

fun indent(str):
  tl = text-length(str)
  fun indent-x(i):
    # scan until next \n
    # if the \n is the last thing in the file, append until the end of the file
    # else append the text until the newline, add the indent, and continue
    j = find-char(str,i,"\n")
    if (j == -1) or (j == (tl - 1)):
      text-substring(str,i,tl)
    else:
      # question: should there be a string builder or a default string data type
      # which can handle this? if a string builder, how will it work? explicit always,
      # or sometimes implict?
      text-substring(str, i, j + 1) + "  " + indent-x(j + 1)
    end
  end
  if str == "": "" else: "  " + indent-x(0) end
where:
  indent("") is ""
  indent("a") is "  a"
  indent("a\nb") is "  a\n  b"
end


##############################################################################

# testing stuf

data Check-block-results:
  | check-block-results(name, test-results)
end

data Test-result:
  | passed(src)
  | values-not-equal(src,a,b)
  | left-side-raised(src,ex)
  | right-side-raised(src,ex)
  | raises-satisfies-failed(src,tst,ex)
  | raises-satisfies-not-function(src,v)
  | raises-satisfies-function-wrong-num-args(src,f)
  | raises-satisfies-function-result-not-boolean(src,v)
end

fun render-test(tr):
  "test (" + tr.src + "): "
    + cases(Test-result) tr:
    | passed(_) => "OK"
    | values-not-equal(_,a,b) => "failed, reason:\n"
        + indent("Values not equal:\n" + torepr(a) + "\n" + torepr(b))
  end
end

#|
print(render-test(passed("1 == 1")))
print(render-test(passed("2 == 2")))
print(render-test(values-not-equal("1 == 2", 1, 2)))
print(render-test(values-not-equal("'x' == 342", 'x', 342)))

print("-----------------------------------")
print("-----------------------------------")
print("-----------------------------------")
   |#

# there's an issue with letrec desugaring
# work around, use lam instead of fun

render-check = lam(cbr): block:
    # split the results into passed and not passed
    # in order to count the two sizes
    # this is probably a very ineffient way of doing it
    # and indirect too
    # add a count-if function, and use this + list-length
    res-split = partition(is-passed, cbr.test-results)
    # render each result
    msgs = map(render-test, cbr.test-results)
    # return the number of passes, the number of fails,
    # and the formatted results + some boilerplate formatting
    # around them
    # todo: use a record, get used to these being available, no
    # more tuples for "multiple return values"
    {length(res-split.is-true); length(res-split.is-false);
    "Check block: " + cbr.name + "\n"
      + intercalate("\n", map(indent, msgs)) + "\n  "
      + tostring(length(res-split.is-true))
        + "/" + tostring(length(cbr.test-results))
      + " tests passed in check block: " + cbr.name}
end end

render-check-results = lam(lst): block:
  bs = map(render-check,lst)
  total-passes = sum(map(_.{0}, bs))
  total-fails = sum(map(_.{1}, bs))
  msgs = map(_.{2}, bs)
  intercalate("\n\n",msgs)
    + "\n\n" + tostring(total-passes)
      + "/" + tostring(total-passes + total-fails)
    + " test passed in all check blocks"
end end

x = check-block-results("check-block-5",
  [list: passed("1 == 1"),
    passed("2 == 2"),
    values-not-equal("1 == 2", 1, 2),
    values-not-equal("'x' == 342", 'x', 342)])

print(render-check-results([list:x]))

print("-----------------------------------")
print("-----------------------------------")
print("-----------------------------------")

#|
check:
  1 is 2
end
   |#