basic untyped pyret dialect

get imports for data types working

fill in some built in modules

relational values and algebra
in memory transactions
durable vars
constraints
annotations, contracts

try out what typeclasses could look like

fix whitespace handling - at least don't allow multiple statements per line
  and don't allow spaces between function app ( and the preceding token

plenty of example scripts

work on ffi to haskell
work on cli

a quick standard lib

concurrency - serializable transactions, threads/processes + queues

much better testing

refactor source code

documentation, website and stuff

finish off import support


types

garbage collection

think about a lower level interpreter (keep the high level one too)
  1. prep for llvm compilation
  2. optimisation


-------------------------------------

overall testing architecture:

1. test most things in language source: this is the main way to test
the interpreter as well as the whole system

2. think about the desugaring tests. these are useful for a sanity
check/maintaining code. they are difficult to write at the moment
try to find better ways to write the tests and structure the code

3. test parsing and pretty printing directly

4. testing the test framework stuff

5. tests for the engine api
-> will cover ffi in the future

6. tests for the command line api

then more advanced testing:
performance benchmarks
stability tests
anomaly tests

after start doing more advanced features, will do more testing types
in addition to elaborating on these

think about some sort of quickcheck style testing
-> this will be much more useful once start on a low level bytecode or
   llvm implementation

ability to profile effectively
test reports, ci, more interesting testing stuff
