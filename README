
A learning project to implement a dialect of Pyret.

Goal is to implement a dialect of Pyret in Haskell, with a high level
interpreter, to learn how to implement functional programming + a
basic type system. The original goal was to implement a language
roughly along the lines of 'Python, but with proper functional
programming and types', and Pyret is very close to this, so I'm mostly
copying Pyret for the time being.

Not ready for human consumption yet.

Demonstration of most supported features:
https://github.com/JakeWheat/teaberry/tree/master/examples/tests/fulltests/tour.tea

See the examples and built in modules directories for more:

https://github.com/JakeWheat/teaberry/tree/master/examples/tests/fulltests
https://github.com/JakeWheat/teaberry/tree/master/built-in-modules

This is how I compile and run the code from source:

cabal run RunTests --disable-optimization -- --hide-successes --ansi-tricks=false

and how I use the command line interface:

cabal run teaberry --disable-optimization -- -g examples/tests/fulltests/tour.tea

(disabling the optimsation makes ghc compile it much faster)

About Pyret
-----------

Pyret is a really nice functional language with an optional type
checker designed for teaching programming.

Homepage:
https://www.pyret.org/
Manual:
https://www.pyret.org/docs/latest/index.html
PAPL, a tutorial for Pyret, programming, and implementing programming languages:
https://papl.cs.brown.edu/2019/index.html

The other big source of knowledge was PLAI, a book about implementing
programming languages (there is some overlap with the second half of
PAPL):
https://www.plai.org/

I found PLAI and PAPL to be much easier for learning how to implement
programming languages than the other usual suspects.
