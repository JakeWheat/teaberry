ask:
  | x == 0 then: 1
  | x > 0 then: x
  | otherwise: x * -1
end OK
ask:
  | x == 0 then: 1
  | x > 0 then: x
  | otherwise: x * -1
en
5:1:
  |
5 | en
  | ^^
unexpected "en"
expecting "end"

^^^^^^^^^^^^^^^^^^^^^^^
ask:
  | x == 0 then: 1
  | x > 0 then: x
  | otherwise: x * -1
e
5:1:
  |
5 | e
  | ^
unexpected 'e'
expecting "end"

^^^^^^^^^^^^^^^^^^^^^^^
ask:
  | x == 0 then: 1
  | x > 0 then: x
  | otherwise: x * -1

5:1:
  |
5 | <empty line>
  | ^
unexpected end of input
expecting "end"

ask:
  | x == 0 then: 1
  | x > 0 then: x
  | otherwise: x * -
4:21:
  |
4 |   | otherwise: x * -
  |                     ^
unexpected end of input
expecting expression

ask:
  | x == 0 then: 1
  | x > 0 then: x
  | otherwise: x * 
4:20:
  |
4 |   | otherwise: x * 
  |                    ^
unexpected end of input
expecting expression

ask:
  | x == 0 then: 1
  | x > 0 then: x
  | otherwise: x 
4:18:
  |
4 |   | otherwise: x 
  |                  ^
unexpected end of input
expecting "end"

ask:
  | x == 0 then: 1
  | x > 0 then: x
  | otherwise: 
4:16:
  |
4 |   | otherwise: 
  |                ^
unexpected end of input
expecting expression

ask:
  | x == 0 then: 1
  | x > 0 then: x
  | otherwise
4:14:
  |
4 |   | otherwise
  |              ^
unexpected end of input
expecting ':'

ask:
  | x == 0 then: 1
  | x > 0 then: x
  | otherwis
4:13:
  |
4 |   | otherwis
  |             ^
unexpected end of input
expecting "then"

ask:
  | x == 0 then: 1
  | x > 0 then: x
  | otherwi
4:12:
  |
4 |   | otherwi
  |            ^
unexpected end of input
expecting "then"

ask:
  | x == 0 then: 1
  | x > 0 then: x
  | otherw
4:11:
  |
4 |   | otherw
  |           ^
unexpected end of input
expecting "then"

ask:
  | x == 0 then: 1
  | x > 0 then: x
  | other
4:10:
  |
4 |   | other
  |          ^
unexpected end of input
expecting "then"

ask:
  | x == 0 then: 1
  | x > 0 then: x
  | othe
4:9:
  |
4 |   | othe
  |         ^
unexpected end of input
expecting "then"

ask:
  | x == 0 then: 1
  | x > 0 then: x
  | oth
4:8:
  |
4 |   | oth
  |        ^
unexpected end of input
expecting "then"

ask:
  | x == 0 then: 1
  | x > 0 then: x
  | ot
4:7:
  |
4 |   | ot
  |       ^
unexpected end of input
expecting "then"

ask:
  | x == 0 then: 1
  | x > 0 then: x
  | o
4:6:
  |
4 |   | o
  |      ^
unexpected end of input
expecting "then"

ask:
  | x == 0 then: 1
  | x > 0 then: x
  | 
4:5:
  |
4 |   | 
  |     ^
unexpected end of input
expecting "otherwise" or expression

ask:
  | x == 0 then: 1
  | x > 0 then: x
  
4:3:
  |
4 |   
  |   ^
unexpected end of input
expecting "end" or '|'

ask:
  | x == 0 then: 1
  | x > 0 then: 
3:17:
  |
3 |   | x > 0 then: 
  |                 ^
unexpected end of input
expecting expression

ask:
  | x == 0 then: 1
  | x > 0 then
3:15:
  |
3 |   | x > 0 then
  |               ^
unexpected end of input
expecting ':'

ask:
  | x == 0 then: 1
  | x > 0 the
3:11:
  |
3 |   | x > 0 the
  |           ^^^
unexpected "the"
expecting "then"

^^^^^^^^^^^^^^^^^^^^^^^
ask:
  | x == 0 then: 1
  | x > 0 th
3:11:
  |
3 |   | x > 0 th
  |           ^^
unexpected "th"
expecting "then"

^^^^^^^^^^^^^^^^^^^^^^^
ask:
  | x == 0 then: 1
  | x > 0 t
3:11:
  |
3 |   | x > 0 t
  |           ^
unexpected 't'
expecting "then"

^^^^^^^^^^^^^^^^^^^^^^^
ask:
  | x == 0 then: 1
  | x > 0 
3:11:
  |
3 |   | x > 0 
  |           ^
unexpected end of input
expecting "then"

ask:
  | x == 0 then: 1
  | x > 
3:9:
  |
3 |   | x > 
  |         ^
unexpected end of input
expecting expression

ask:
  | x == 0 then: 1
  | x 
3:7:
  |
3 |   | x 
  |       ^
unexpected end of input
expecting "then"

ask:
  | x == 0 then: 1
  | 
3:5:
  |
3 |   | 
  |     ^
unexpected end of input
expecting "otherwise" or expression

ask:
  | x == 0 then: 1
  
3:3:
  |
3 |   
  |   ^
unexpected end of input
expecting "end" or '|'

ask:
  | x == 0 then: 
2:18:
  |
2 |   | x == 0 then: 
  |                  ^
unexpected end of input
expecting expression

ask:
  | x == 0 then
2:16:
  |
2 |   | x == 0 then
  |                ^
unexpected end of input
expecting ':'

ask:
  | x == 0 the
2:12:
  |
2 |   | x == 0 the
  |            ^^^
unexpected "the"
expecting "then"

^^^^^^^^^^^^^^^^^^^^^^^
ask:
  | x == 0 th
2:12:
  |
2 |   | x == 0 th
  |            ^^
unexpected "th"
expecting "then"

^^^^^^^^^^^^^^^^^^^^^^^
ask:
  | x == 0 t
2:12:
  |
2 |   | x == 0 t
  |            ^
unexpected 't'
expecting "then"

^^^^^^^^^^^^^^^^^^^^^^^
ask:
  | x == 0 
2:12:
  |
2 |   | x == 0 
  |            ^
unexpected end of input
expecting "then"

ask:
  | x == 
2:10:
  |
2 |   | x == 
  |          ^
unexpected end of input
expecting expression

ask:
  | x =
2:7:
  |
2 |   | x =
  |       ^
unexpected '='
expecting "then"

^^^^^^^^^^^^^^^^^^^^^^^
ask:
  | x 
2:7:
  |
2 |   | x 
  |       ^
unexpected end of input
expecting "then"

ask:
  | 
2:5:
  |
2 |   | 
  |     ^
unexpected end of input
expecting "otherwise" or expression

ask:
  
2:3:
  |
2 |   
  |   ^
unexpected end of input
expecting "end" or '|'

ask
1:4:
  |
1 | ask
  |    ^
unexpected end of input
expecting ':'

as
1:1:
  |
1 | as
  | ^
unexpected 'a'
expecting "import", "include", or "provide"

^^^^^^^^^^^^^^^^^^^^^^^
a OK

cases (Two) a:
  | pt1(x,y) => if n == 0: x else: y end
  | pt2(x,y) => if n == 0: x else: y end
end OK
cases (Two) a:
  | pt1(x,y) => if n == 0: x else: y end
  | pt2(x,y) => if n == 0: x else: y end
en
4:1:
  |
4 | en
  | ^^
unexpected "en"
expecting "end" or '|'

^^^^^^^^^^^^^^^^^^^^^^^
cases (Two) a:
  | pt1(x,y) => if n == 0: x else: y end
  | pt2(x,y) => if n == 0: x else: y end
e
4:1:
  |
4 | e
  | ^
unexpected 'e'
expecting "end" or '|'

^^^^^^^^^^^^^^^^^^^^^^^
cases (Two) a:
  | pt1(x,y) => if n == 0: x else: y end
  | pt2(x,y) => if n == 0: x else: y end

4:1:
  |
4 | <empty line>
  | ^
unexpected end of input
expecting "end" or '|'

cases (Two) a:
  | pt1(x,y) => if n == 0: x else: y end
  | pt2(x,y) => if n == 0: x else: y en
3:38:
  |
3 |   | pt2(x,y) => if n == 0: x else: y en
  |                                      ^^
unexpected "en"
expecting "end"

^^^^^^^^^^^^^^^^^^^^^^^
cases (Two) a:
  | pt1(x,y) => if n == 0: x else: y end
  | pt2(x,y) => if n == 0: x else: y e
3:38:
  |
3 |   | pt2(x,y) => if n == 0: x else: y e
  |                                      ^
unexpected 'e'
expecting "end"

^^^^^^^^^^^^^^^^^^^^^^^
cases (Two) a:
  | pt1(x,y) => if n == 0: x else: y end
  | pt2(x,y) => if n == 0: x else: y 
3:38:
  |
3 |   | pt2(x,y) => if n == 0: x else: y 
  |                                      ^
unexpected end of input
expecting "end"

cases (Two) a:
  | pt1(x,y) => if n == 0: x else: y end
  | pt2(x,y) => if n == 0: x else: 
3:36:
  |
3 |   | pt2(x,y) => if n == 0: x else: 
  |                                    ^
unexpected end of input
expecting expression

cases (Two) a:
  | pt1(x,y) => if n == 0: x else: y end
  | pt2(x,y) => if n == 0: x else
3:34:
  |
3 |   | pt2(x,y) => if n == 0: x else
  |                                  ^
unexpected end of input
expecting "if" or ':'

cases (Two) a:
  | pt1(x,y) => if n == 0: x else: y end
  | pt2(x,y) => if n == 0: x els
3:30:
  |
3 |   | pt2(x,y) => if n == 0: x els
  |                              ^^^
unexpected "els"
expecting "else" or "end"

^^^^^^^^^^^^^^^^^^^^^^^
cases (Two) a:
  | pt1(x,y) => if n == 0: x else: y end
  | pt2(x,y) => if n == 0: x el
3:30:
  |
3 |   | pt2(x,y) => if n == 0: x el
  |                              ^^
unexpected "el"
expecting "else" or "end"

^^^^^^^^^^^^^^^^^^^^^^^
cases (Two) a:
  | pt1(x,y) => if n == 0: x else: y end
  | pt2(x,y) => if n == 0: x e
3:30:
  |
3 |   | pt2(x,y) => if n == 0: x e
  |                              ^
unexpected 'e'
expecting "else" or "end"

^^^^^^^^^^^^^^^^^^^^^^^
cases (Two) a:
  | pt1(x,y) => if n == 0: x else: y end
  | pt2(x,y) => if n == 0: x 
3:30:
  |
3 |   | pt2(x,y) => if n == 0: x 
  |                              ^
unexpected end of input
expecting "else" or "end"

cases (Two) a:
  | pt1(x,y) => if n == 0: x else: y end
  | pt2(x,y) => if n == 0: 
3:28:
  |
3 |   | pt2(x,y) => if n == 0: 
  |                            ^
unexpected end of input
expecting expression

cases (Two) a:
  | pt1(x,y) => if n == 0: x else: y end
  | pt2(x,y) => if n == 0
3:26:
  |
3 |   | pt2(x,y) => if n == 0
  |                          ^
unexpected end of input
expecting ':'

cases (Two) a:
  | pt1(x,y) => if n == 0: x else: y end
  | pt2(x,y) => if n == 
3:25:
  |
3 |   | pt2(x,y) => if n == 
  |                         ^
unexpected end of input
expecting expression

cases (Two) a:
  | pt1(x,y) => if n == 0: x else: y end
  | pt2(x,y) => if n =
3:22:
  |
3 |   | pt2(x,y) => if n =
  |                      ^
unexpected '='
expecting ':'

^^^^^^^^^^^^^^^^^^^^^^^
cases (Two) a:
  | pt1(x,y) => if n == 0: x else: y end
  | pt2(x,y) => if n 
3:22:
  |
3 |   | pt2(x,y) => if n 
  |                      ^
unexpected end of input
expecting ':'

cases (Two) a:
  | pt1(x,y) => if n == 0: x else: y end
  | pt2(x,y) => if 
3:20:
  |
3 |   | pt2(x,y) => if 
  |                    ^
unexpected end of input
expecting expression

cases (Two) a:
  | pt1(x,y) => if n == 0: x else: y end
  | pt2(x,y) => i
3:18:
  |
3 |   | pt2(x,y) => i
  |                  ^
unexpected end of input
expecting "end" or '|'

cases (Two) a:
  | pt1(x,y) => if n == 0: x else: y end
  | pt2(x,y) => 
3:17:
  |
3 |   | pt2(x,y) => 
  |                 ^
unexpected end of input
expecting expression

cases (Two) a:
  | pt1(x,y) => if n == 0: x else: y end
  | pt2(x,y) =
3:14:
  |
3 |   | pt2(x,y) =
  |              ^
unexpected '='
expecting "=>"

^^^^^^^^^^^^^^^^^^^^^^^
cases (Two) a:
  | pt1(x,y) => if n == 0: x else: y end
  | pt2(x,y) 
3:14:
  |
3 |   | pt2(x,y) 
  |              ^
unexpected end of input
expecting "=>"

cases (Two) a:
  | pt1(x,y) => if n == 0: x else: y end
  | pt2(x,y
3:12:
  |
3 |   | pt2(x,y
  |            ^
unexpected end of input
expecting ')' or ','

cases (Two) a:
  | pt1(x,y) => if n == 0: x else: y end
  | pt2(x,
3:11:
  |
3 |   | pt2(x,
  |           ^
unexpected end of input
expecting identifier

cases (Two) a:
  | pt1(x,y) => if n == 0: x else: y end
  | pt2(x
3:10:
  |
3 |   | pt2(x
  |          ^
unexpected end of input
expecting ')' or ','

cases (Two) a:
  | pt1(x,y) => if n == 0: x else: y end
  | pt2(
3:9:
  |
3 |   | pt2(
  |         ^
unexpected end of input
expecting ')' or identifier

cases (Two) a:
  | pt1(x,y) => if n == 0: x else: y end
  | pt2
3:8:
  |
3 |   | pt2
  |        ^
unexpected end of input
expecting "=>"

cases (Two) a:
  | pt1(x,y) => if n == 0: x else: y end
  | pt
3:7:
  |
3 |   | pt
  |       ^
unexpected end of input
expecting "=>"

cases (Two) a:
  | pt1(x,y) => if n == 0: x else: y end
  | p
3:6:
  |
3 |   | p
  |      ^
unexpected end of input
expecting "=>"

cases (Two) a:
  | pt1(x,y) => if n == 0: x else: y end
  | 
3:5:
  |
3 |   | 
  |     ^
unexpected end of input
expecting "else" or pattern

cases (Two) a:
  | pt1(x,y) => if n == 0: x else: y end
  
3:3:
  |
3 |   
  |   ^
unexpected end of input
expecting "end" or '|'

cases (Two) a:
  | pt1(x,y) => if n == 0: x else: y en
2:38:
  |
2 |   | pt1(x,y) => if n == 0: x else: y en
  |                                      ^^
unexpected "en"
expecting "end"

^^^^^^^^^^^^^^^^^^^^^^^
cases (Two) a:
  | pt1(x,y) => if n == 0: x else: y e
2:38:
  |
2 |   | pt1(x,y) => if n == 0: x else: y e
  |                                      ^
unexpected 'e'
expecting "end"

^^^^^^^^^^^^^^^^^^^^^^^
cases (Two) a:
  | pt1(x,y) => if n == 0: x else: y 
2:38:
  |
2 |   | pt1(x,y) => if n == 0: x else: y 
  |                                      ^
unexpected end of input
expecting "end"

cases (Two) a:
  | pt1(x,y) => if n == 0: x else: 
2:36:
  |
2 |   | pt1(x,y) => if n == 0: x else: 
  |                                    ^
unexpected end of input
expecting expression

cases (Two) a:
  | pt1(x,y) => if n == 0: x else
2:34:
  |
2 |   | pt1(x,y) => if n == 0: x else
  |                                  ^
unexpected end of input
expecting "if" or ':'

cases (Two) a:
  | pt1(x,y) => if n == 0: x els
2:30:
  |
2 |   | pt1(x,y) => if n == 0: x els
  |                              ^^^
unexpected "els"
expecting "else" or "end"

^^^^^^^^^^^^^^^^^^^^^^^
cases (Two) a:
  | pt1(x,y) => if n == 0: x el
2:30:
  |
2 |   | pt1(x,y) => if n == 0: x el
  |                              ^^
unexpected "el"
expecting "else" or "end"

^^^^^^^^^^^^^^^^^^^^^^^
cases (Two) a:
  | pt1(x,y) => if n == 0: x e
2:30:
  |
2 |   | pt1(x,y) => if n == 0: x e
  |                              ^
unexpected 'e'
expecting "else" or "end"

^^^^^^^^^^^^^^^^^^^^^^^
cases (Two) a:
  | pt1(x,y) => if n == 0: x 
2:30:
  |
2 |   | pt1(x,y) => if n == 0: x 
  |                              ^
unexpected end of input
expecting "else" or "end"

cases (Two) a:
  | pt1(x,y) => if n == 0: 
2:28:
  |
2 |   | pt1(x,y) => if n == 0: 
  |                            ^
unexpected end of input
expecting expression

cases (Two) a:
  | pt1(x,y) => if n == 0
2:26:
  |
2 |   | pt1(x,y) => if n == 0
  |                          ^
unexpected end of input
expecting ':'

cases (Two) a:
  | pt1(x,y) => if n == 
2:25:
  |
2 |   | pt1(x,y) => if n == 
  |                         ^
unexpected end of input
expecting expression

cases (Two) a:
  | pt1(x,y) => if n =
2:22:
  |
2 |   | pt1(x,y) => if n =
  |                      ^
unexpected '='
expecting ':'

^^^^^^^^^^^^^^^^^^^^^^^
cases (Two) a:
  | pt1(x,y) => if n 
2:22:
  |
2 |   | pt1(x,y) => if n 
  |                      ^
unexpected end of input
expecting ':'

cases (Two) a:
  | pt1(x,y) => if 
2:20:
  |
2 |   | pt1(x,y) => if 
  |                    ^
unexpected end of input
expecting expression

cases (Two) a:
  | pt1(x,y) => i
2:18:
  |
2 |   | pt1(x,y) => i
  |                  ^
unexpected end of input
expecting "end" or '|'

cases (Two) a:
  | pt1(x,y) => 
2:17:
  |
2 |   | pt1(x,y) => 
  |                 ^
unexpected end of input
expecting expression

cases (Two) a:
  | pt1(x,y) =
2:14:
  |
2 |   | pt1(x,y) =
  |              ^
unexpected '='
expecting "=>"

^^^^^^^^^^^^^^^^^^^^^^^
cases (Two) a:
  | pt1(x,y) 
2:14:
  |
2 |   | pt1(x,y) 
  |              ^
unexpected end of input
expecting "=>"

cases (Two) a:
  | pt1(x,y
2:12:
  |
2 |   | pt1(x,y
  |            ^
unexpected end of input
expecting ')' or ','

cases (Two) a:
  | pt1(x,
2:11:
  |
2 |   | pt1(x,
  |           ^
unexpected end of input
expecting identifier

cases (Two) a:
  | pt1(x
2:10:
  |
2 |   | pt1(x
  |          ^
unexpected end of input
expecting ')' or ','

cases (Two) a:
  | pt1(
2:9:
  |
2 |   | pt1(
  |         ^
unexpected end of input
expecting ')' or identifier

cases (Two) a:
  | pt1
2:8:
  |
2 |   | pt1
  |        ^
unexpected end of input
expecting "=>"

cases (Two) a:
  | pt
2:7:
  |
2 |   | pt
  |       ^
unexpected end of input
expecting "=>"

cases (Two) a:
  | p
2:6:
  |
2 |   | p
  |      ^
unexpected end of input
expecting "=>"

cases (Two) a:
  | 
2:5:
  |
2 |   | 
  |     ^
unexpected end of input
expecting "else" or pattern

cases (Two) a:
  
2:3:
  |
2 |   
  |   ^
unexpected end of input
expecting "end" or '|'

cases (Two) a
1:14:
  |
1 | cases (Two) a
  |              ^
unexpected end of input
expecting ':'

cases (Two) 
1:13:
  |
1 | cases (Two) 
  |             ^
unexpected end of input
expecting expression

cases (Two
1:11:
  |
1 | cases (Two
  |           ^
unexpected end of input
expecting ')'

cases (Tw
1:10:
  |
1 | cases (Tw
  |          ^
unexpected end of input
expecting ')'

cases (T
1:9:
  |
1 | cases (T
  |         ^
unexpected end of input
expecting ')'

cases (
1:8:
  |
1 | cases (
  |        ^
unexpected end of input
expecting identifier

cases 
1:7:
  |
1 | cases 
  |       ^
unexpected end of input
expecting '('

case OK
cas OK
ca OK
c OK

example2 = {
  make: lam(args): link(42,args) end,
  make8: lam(a,b): [list: 8,a,b] end
} OK
example2 = {
  make: lam(args): link(42,args) end,
  make8: lam(a,b): [list: 8,a,b] end

4:1:
  |
4 | <empty line>
  | ^
unexpected end of input
expecting ',' or '}'

example2 = {
  make: lam(args): link(42,args) end,
  make8: lam(a,b): [list: 8,a,b] en
3:34:
  |
3 |   make8: lam(a,b): [list: 8,a,b] en
  |                                  ^^
unexpected "en"
expecting "end"

^^^^^^^^^^^^^^^^^^^^^^^
example2 = {
  make: lam(args): link(42,args) end,
  make8: lam(a,b): [list: 8,a,b] e
3:34:
  |
3 |   make8: lam(a,b): [list: 8,a,b] e
  |                                  ^
unexpected 'e'
expecting "end"

^^^^^^^^^^^^^^^^^^^^^^^
example2 = {
  make: lam(args): link(42,args) end,
  make8: lam(a,b): [list: 8,a,b] 
3:34:
  |
3 |   make8: lam(a,b): [list: 8,a,b] 
  |                                  ^
unexpected end of input
expecting "end"

example2 = {
  make: lam(args): link(42,args) end,
  make8: lam(a,b): [list: 8,a,b
3:32:
  |
3 |   make8: lam(a,b): [list: 8,a,b
  |                                ^
unexpected end of input
expecting ',' or ']'

example2 = {
  make: lam(args): link(42,args) end,
  make8: lam(a,b): [list: 8,a,
3:31:
  |
3 |   make8: lam(a,b): [list: 8,a,
  |                               ^
unexpected end of input
expecting expression

example2 = {
  make: lam(args): link(42,args) end,
  make8: lam(a,b): [list: 8,a
3:30:
  |
3 |   make8: lam(a,b): [list: 8,a
  |                              ^
unexpected end of input
expecting ',' or ']'

example2 = {
  make: lam(args): link(42,args) end,
  make8: lam(a,b): [list: 8,
3:29:
  |
3 |   make8: lam(a,b): [list: 8,
  |                             ^
unexpected end of input
expecting expression

example2 = {
  make: lam(args): link(42,args) end,
  make8: lam(a,b): [list: 8
3:28:
  |
3 |   make8: lam(a,b): [list: 8
  |                            ^
unexpected end of input
expecting ',' or ']'

example2 = {
  make: lam(args): link(42,args) end,
  make8: lam(a,b): [list: 
3:27:
  |
3 |   make8: lam(a,b): [list: 
  |                           ^
unexpected end of input
expecting ']' or expression

example2 = {
  make: lam(args): link(42,args) end,
  make8: lam(a,b): [list
3:25:
  |
3 |   make8: lam(a,b): [list
  |                         ^
unexpected end of input
expecting ':'

example2 = {
  make: lam(args): link(42,args) end,
  make8: lam(a,b): [lis
3:24:
  |
3 |   make8: lam(a,b): [lis
  |                        ^
unexpected end of input
expecting ':'

example2 = {
  make: lam(args): link(42,args) end,
  make8: lam(a,b): [li
3:23:
  |
3 |   make8: lam(a,b): [li
  |                       ^
unexpected end of input
expecting ':'

example2 = {
  make: lam(args): link(42,args) end,
  make8: lam(a,b): [l
3:22:
  |
3 |   make8: lam(a,b): [l
  |                      ^
unexpected end of input
expecting ':'

example2 = {
  make: lam(args): link(42,args) end,
  make8: lam(a,b): [
3:21:
  |
3 |   make8: lam(a,b): [
  |                     ^
unexpected end of input
expecting identifier

example2 = {
  make: lam(args): link(42,args) end,
  make8: lam(a,b): 
3:20:
  |
3 |   make8: lam(a,b): 
  |                    ^
unexpected end of input
expecting expression

example2 = {
  make: lam(args): link(42,args) end,
  make8: lam(a,b)
3:18:
  |
3 |   make8: lam(a,b)
  |                  ^
unexpected end of input
expecting ':'

example2 = {
  make: lam(args): link(42,args) end,
  make8: lam(a,b
3:17:
  |
3 |   make8: lam(a,b
  |                 ^
unexpected end of input
expecting ')' or ','

example2 = {
  make: lam(args): link(42,args) end,
  make8: lam(a,
3:16:
  |
3 |   make8: lam(a,
  |                ^
unexpected end of input
expecting identifier

example2 = {
  make: lam(args): link(42,args) end,
  make8: lam(a
3:15:
  |
3 |   make8: lam(a
  |               ^
unexpected end of input
expecting ')' or ','

example2 = {
  make: lam(args): link(42,args) end,
  make8: lam(
3:14:
  |
3 |   make8: lam(
  |              ^
unexpected end of input
expecting ')' or identifier

example2 = {
  make: lam(args): link(42,args) end,
  make8: lam
3:13:
  |
3 |   make8: lam
  |             ^
unexpected end of input
expecting '('

example2 = {
  make: lam(args): link(42,args) end,
  make8: la
3:12:
  |
3 |   make8: la
  |            ^
unexpected end of input
expecting ',' or '}'

example2 = {
  make: lam(args): link(42,args) end,
  make8: l
3:11:
  |
3 |   make8: l
  |           ^
unexpected end of input
expecting ',' or '}'

example2 = {
  make: lam(args): link(42,args) end,
  make8: 
3:10:
  |
3 |   make8: 
  |          ^
unexpected end of input
expecting expression

example2 = {
  make: lam(args): link(42,args) end,
  make8
3:8:
  |
3 |   make8
  |        ^
unexpected end of input
expecting ':'

example2 = {
  make: lam(args): link(42,args) end,
  make
3:7:
  |
3 |   make
  |       ^
unexpected end of input
expecting ':'

example2 = {
  make: lam(args): link(42,args) end,
  mak
3:6:
  |
3 |   mak
  |      ^
unexpected end of input
expecting ':'

example2 = {
  make: lam(args): link(42,args) end,
  ma
3:5:
  |
3 |   ma
  |     ^
unexpected end of input
expecting ':'

example2 = {
  make: lam(args): link(42,args) end,
  m
3:4:
  |
3 |   m
  |    ^
unexpected end of input
expecting ':'

example2 = {
  make: lam(args): link(42,args) end,
  
3:3:
  |
3 |   
  |   ^
unexpected end of input
expecting '}' or identifier

example2 = {
  make: lam(args): link(42,args) end
2:37:
  |
2 |   make: lam(args): link(42,args) end
  |                                     ^
unexpected end of input
expecting ',' or '}'

example2 = {
  make: lam(args): link(42,args) en
2:34:
  |
2 |   make: lam(args): link(42,args) en
  |                                  ^^
unexpected "en"
expecting "end"

^^^^^^^^^^^^^^^^^^^^^^^
example2 = {
  make: lam(args): link(42,args) e
2:34:
  |
2 |   make: lam(args): link(42,args) e
  |                                  ^
unexpected 'e'
expecting "end"

^^^^^^^^^^^^^^^^^^^^^^^
example2 = {
  make: lam(args): link(42,args) 
2:34:
  |
2 |   make: lam(args): link(42,args) 
  |                                  ^
unexpected end of input
expecting "end"

example2 = {
  make: lam(args): link(42,args
2:32:
  |
2 |   make: lam(args): link(42,args
  |                                ^
unexpected end of input
expecting ')' or ','

example2 = {
  make: lam(args): link(42,arg
2:31:
  |
2 |   make: lam(args): link(42,arg
  |                               ^
unexpected end of input
expecting ')' or ','

example2 = {
  make: lam(args): link(42,ar
2:30:
  |
2 |   make: lam(args): link(42,ar
  |                              ^
unexpected end of input
expecting ')' or ','

example2 = {
  make: lam(args): link(42,a
2:29:
  |
2 |   make: lam(args): link(42,a
  |                             ^
unexpected end of input
expecting ')' or ','

example2 = {
  make: lam(args): link(42,
2:28:
  |
2 |   make: lam(args): link(42,
  |                            ^
unexpected end of input
expecting expression

example2 = {
  make: lam(args): link(42
2:27:
  |
2 |   make: lam(args): link(42
  |                           ^
unexpected end of input
expecting ')' or ','

example2 = {
  make: lam(args): link(4
2:26:
  |
2 |   make: lam(args): link(4
  |                          ^
unexpected end of input
expecting ')' or ','

example2 = {
  make: lam(args): link(
2:25:
  |
2 |   make: lam(args): link(
  |                         ^
unexpected end of input
expecting ')' or expression

example2 = {
  make: lam(args): link
2:24:
  |
2 |   make: lam(args): link
  |                        ^
unexpected end of input
expecting "end"

example2 = {
  make: lam(args): lin
2:23:
  |
2 |   make: lam(args): lin
  |                       ^
unexpected end of input
expecting "end"

example2 = {
  make: lam(args): li
2:22:
  |
2 |   make: lam(args): li
  |                      ^
unexpected end of input
expecting "end"

example2 = {
  make: lam(args): l
2:21:
  |
2 |   make: lam(args): l
  |                     ^
unexpected end of input
expecting "end"

example2 = {
  make: lam(args): 
2:20:
  |
2 |   make: lam(args): 
  |                    ^
unexpected end of input
expecting expression

example2 = {
  make: lam(args)
2:18:
  |
2 |   make: lam(args)
  |                  ^
unexpected end of input
expecting ':'

example2 = {
  make: lam(args
2:17:
  |
2 |   make: lam(args
  |                 ^
unexpected end of input
expecting ')' or ','

example2 = {
  make: lam(arg
2:16:
  |
2 |   make: lam(arg
  |                ^
unexpected end of input
expecting ')' or ','

example2 = {
  make: lam(ar
2:15:
  |
2 |   make: lam(ar
  |               ^
unexpected end of input
expecting ')' or ','

example2 = {
  make: lam(a
2:14:
  |
2 |   make: lam(a
  |              ^
unexpected end of input
expecting ')' or ','

example2 = {
  make: lam(
2:13:
  |
2 |   make: lam(
  |             ^
unexpected end of input
expecting ')' or identifier

example2 = {
  make: lam
2:12:
  |
2 |   make: lam
  |            ^
unexpected end of input
expecting '('

example2 = {
  make: la
2:11:
  |
2 |   make: la
  |           ^
unexpected end of input
expecting ',' or '}'

example2 = {
  make: l
2:10:
  |
2 |   make: l
  |          ^
unexpected end of input
expecting ',' or '}'

example2 = {
  make: 
2:9:
  |
2 |   make: 
  |         ^
unexpected end of input
expecting expression

example2 = {
  make
2:7:
  |
2 |   make
  |       ^
unexpected end of input
expecting ':', ';', or '}'

example2 = {
  mak
2:6:
  |
2 |   mak
  |      ^
unexpected end of input
expecting ':', ';', or '}'

example2 = {
  ma
2:5:
  |
2 |   ma
  |     ^
unexpected end of input
expecting ':', ';', or '}'

example2 = {
  m
2:4:
  |
2 |   m
  |    ^
unexpected end of input
expecting ':', ';', or '}'

example2 = {
  
2:3:
  |
2 |   
  |   ^
unexpected end of input
expecting '}' or expression

example2 = 
1:12:
  |
1 | example2 = 
  |            ^
unexpected end of input
expecting expression

example2  OK
example OK
exampl OK
examp OK
exam OK
exa OK
ex OK
e OK

fun apply-twice(f, x):
  f(f(x))
where:
  apply-twice(square, 3) is 81
end OK
fun apply-twice(f, x):
  f(f(x))
where:
  apply-twice(square, 3) is 81
en
5:3:
  |
5 | en
  |   ^
unexpected end of input
expecting "end", '=', or statement

fun apply-twice(f, x):
  f(f(x))
where:
  apply-twice(square, 3) is 81
e
5:2:
  |
5 | e
  |  ^
unexpected end of input
expecting "end", '=', or statement

fun apply-twice(f, x):
  f(f(x))
where:
  apply-twice(square, 3) is 81

5:1:
  |
5 | <empty line>
  | ^
unexpected end of input
expecting "end"

fun apply-twice(f, x):
  f(f(x))
where:
  apply-twice(square, 3) is 8
4:30:
  |
4 |   apply-twice(square, 3) is 8
  |                              ^
unexpected end of input
expecting "end"

fun apply-twice(f, x):
  f(f(x))
where:
  apply-twice(square, 3) is 
4:29:
  |
4 |   apply-twice(square, 3) is 
  |                             ^
unexpected end of input
expecting expression

fun apply-twice(f, x):
  f(f(x))
where:
  apply-twice(square, 3) i
4:27:
  |
4 |   apply-twice(square, 3) i
  |                           ^
unexpected end of input
expecting "end", '=', or statement

fun apply-twice(f, x):
  f(f(x))
where:
  apply-twice(square, 3) 
4:26:
  |
4 |   apply-twice(square, 3) 
  |                          ^
unexpected end of input
expecting "end"

fun apply-twice(f, x):
  f(f(x))
where:
  apply-twice(square, 3
4:24:
  |
4 |   apply-twice(square, 3
  |                        ^
unexpected end of input
expecting ')' or ','

fun apply-twice(f, x):
  f(f(x))
where:
  apply-twice(square, 
4:23:
  |
4 |   apply-twice(square, 
  |                       ^
unexpected end of input
expecting expression

fun apply-twice(f, x):
  f(f(x))
where:
  apply-twice(square
4:21:
  |
4 |   apply-twice(square
  |                     ^
unexpected end of input
expecting ')' or ','

fun apply-twice(f, x):
  f(f(x))
where:
  apply-twice(squar
4:20:
  |
4 |   apply-twice(squar
  |                    ^
unexpected end of input
expecting ')' or ','

fun apply-twice(f, x):
  f(f(x))
where:
  apply-twice(squa
4:19:
  |
4 |   apply-twice(squa
  |                   ^
unexpected end of input
expecting ')' or ','

fun apply-twice(f, x):
  f(f(x))
where:
  apply-twice(squ
4:18:
  |
4 |   apply-twice(squ
  |                  ^
unexpected end of input
expecting ')' or ','

fun apply-twice(f, x):
  f(f(x))
where:
  apply-twice(sq
4:17:
  |
4 |   apply-twice(sq
  |                 ^
unexpected end of input
expecting ')' or ','

fun apply-twice(f, x):
  f(f(x))
where:
  apply-twice(s
4:16:
  |
4 |   apply-twice(s
  |                ^
unexpected end of input
expecting ')' or ','

fun apply-twice(f, x):
  f(f(x))
where:
  apply-twice(
4:15:
  |
4 |   apply-twice(
  |               ^
unexpected end of input
expecting ')' or expression

fun apply-twice(f, x):
  f(f(x))
where:
  apply-twice
4:14:
  |
4 |   apply-twice
  |              ^
unexpected end of input
expecting "end", '=', or statement

fun apply-twice(f, x):
  f(f(x))
where:
  apply-twic
4:13:
  |
4 |   apply-twic
  |             ^
unexpected end of input
expecting "end", '=', or statement

fun apply-twice(f, x):
  f(f(x))
where:
  apply-twi
4:12:
  |
4 |   apply-twi
  |            ^
unexpected end of input
expecting "end", '=', or statement

fun apply-twice(f, x):
  f(f(x))
where:
  apply-tw
4:11:
  |
4 |   apply-tw
  |           ^
unexpected end of input
expecting "end", '=', or statement

fun apply-twice(f, x):
  f(f(x))
where:
  apply-t
4:10:
  |
4 |   apply-t
  |          ^
unexpected end of input
expecting "end", '=', or statement

fun apply-twice(f, x):
  f(f(x))
where:
  apply-
4:9:
  |
4 |   apply-
  |         ^
unexpected end of input
expecting "end", '=', or statement

fun apply-twice(f, x):
  f(f(x))
where:
  apply
4:8:
  |
4 |   apply
  |        ^
unexpected end of input
expecting "end", '=', or statement

fun apply-twice(f, x):
  f(f(x))
where:
  appl
4:7:
  |
4 |   appl
  |       ^
unexpected end of input
expecting "end", '=', or statement

fun apply-twice(f, x):
  f(f(x))
where:
  app
4:6:
  |
4 |   app
  |      ^
unexpected end of input
expecting "end", '=', or statement

fun apply-twice(f, x):
  f(f(x))
where:
  ap
4:5:
  |
4 |   ap
  |     ^
unexpected end of input
expecting "end", '=', or statement

fun apply-twice(f, x):
  f(f(x))
where:
  a
4:4:
  |
4 |   a
  |    ^
unexpected end of input
expecting "end", '=', or statement

fun apply-twice(f, x):
  f(f(x))
where:
  
4:3:
  |
4 |   
  |   ^
unexpected end of input
expecting "end"

fun apply-twice(f, x):
  f(f(x))
where
3:6:
  |
3 | where
  |      ^
unexpected end of input
expecting ':'

fun apply-twice(f, x):
  f(f(x))
wher
3:5:
  |
3 | wher
  |     ^
unexpected end of input
expecting ":=", "end", '=', or statement

fun apply-twice(f, x):
  f(f(x))
whe
3:4:
  |
3 | whe
  |    ^
unexpected end of input
expecting ":=", "end", '=', or statement

fun apply-twice(f, x):
  f(f(x))
wh
3:3:
  |
3 | wh
  |   ^
unexpected end of input
expecting ":=", "end", '=', or statement

fun apply-twice(f, x):
  f(f(x))
w
3:2:
  |
3 | w
  |  ^
unexpected end of input
expecting ":=", "end", '=', or statement

fun apply-twice(f, x):
  f(f(x))

3:1:
  |
3 | <empty line>
  | ^
unexpected end of input
expecting "end", '=', or statement

fun apply-twice(f, x):
  f(f(x)
2:9:
  |
2 |   f(f(x)
  |         ^
unexpected end of input
expecting ')' or ','

fun apply-twice(f, x):
  f(f(x
2:8:
  |
2 |   f(f(x
  |        ^
unexpected end of input
expecting ')' or ','

fun apply-twice(f, x):
  f(f(
2:7:
  |
2 |   f(f(
  |       ^
unexpected end of input
expecting ')' or expression

fun apply-twice(f, x):
  f(f
2:6:
  |
2 |   f(f
  |      ^
unexpected end of input
expecting ')' or ','

fun apply-twice(f, x):
  f(
2:5:
  |
2 |   f(
  |     ^
unexpected end of input
expecting ')' or expression

fun apply-twice(f, x):
  f
2:4:
  |
2 |   f
  |    ^
unexpected end of input
expecting ":=", "end", '=', or statement

fun apply-twice(f, x):
  
2:3:
  |
2 |   
  |   ^
unexpected end of input
expecting statement

fun apply-twice(f, x)
1:22:
  |
1 | fun apply-twice(f, x)
  |                      ^
unexpected end of input
expecting ':'

fun apply-twice(f, x
1:21:
  |
1 | fun apply-twice(f, x
  |                     ^
unexpected end of input
expecting ')' or ','

fun apply-twice(f, 
1:20:
  |
1 | fun apply-twice(f, 
  |                    ^
unexpected end of input
expecting identifier

fun apply-twice(f
1:18:
  |
1 | fun apply-twice(f
  |                  ^
unexpected end of input
expecting ')' or ','

fun apply-twice(
1:17:
  |
1 | fun apply-twice(
  |                 ^
unexpected end of input
expecting ')' or identifier

fun apply-twice
1:16:
  |
1 | fun apply-twice
  |                ^
unexpected end of input
expecting '('

fun apply-twic
1:15:
  |
1 | fun apply-twic
  |               ^
unexpected end of input
expecting '('

fun apply-twi
1:14:
  |
1 | fun apply-twi
  |              ^
unexpected end of input
expecting '('

fun apply-tw
1:13:
  |
1 | fun apply-tw
  |             ^
unexpected end of input
expecting '('

fun apply-t
1:12:
  |
1 | fun apply-t
  |            ^
unexpected end of input
expecting '('

fun apply-
1:11:
  |
1 | fun apply-
  |           ^
unexpected end of input
expecting '('

fun apply
1:10:
  |
1 | fun apply
  |          ^
unexpected end of input
expecting '('

fun appl
1:9:
  |
1 | fun appl
  |         ^
unexpected end of input
expecting '('

fun app
1:8:
  |
1 | fun app
  |        ^
unexpected end of input
expecting '('

fun ap
1:7:
  |
1 | fun ap
  |       ^
unexpected end of input
expecting '('

fun a
1:6:
  |
1 | fun a
  |      ^
unexpected end of input
expecting '('

fun 
1:5:
  |
1 | fun 
  |     ^
unexpected end of input
expecting identifier

fu OK
f OK

check "x":
  f(1) is true
  raise("hello") raises "hello"
  raise(1) raises-satisfies is_one
end OK
check "x":
  f(1) is true
  raise("hello") raises "hello"
  raise(1) raises-satisfies is_one
en
5:3:
  |
5 | en
  |   ^
unexpected end of input
expecting ":=", "end", '=', or statement

check "x":
  f(1) is true
  raise("hello") raises "hello"
  raise(1) raises-satisfies is_one
e
5:2:
  |
5 | e
  |  ^
unexpected end of input
expecting ":=", "end", '=', or statement

check "x":
  f(1) is true
  raise("hello") raises "hello"
  raise(1) raises-satisfies is_one

5:1:
  |
5 | <empty line>
  | ^
unexpected end of input
expecting "end" or statement

check "x":
  f(1) is true
  raise("hello") raises "hello"
  raise(1) raises-satisfies is_on
4:34:
  |
4 |   raise(1) raises-satisfies is_on
  |                                  ^
unexpected end of input
expecting "end" or statement

check "x":
  f(1) is true
  raise("hello") raises "hello"
  raise(1) raises-satisfies is_o
4:33:
  |
4 |   raise(1) raises-satisfies is_o
  |                                 ^
unexpected end of input
expecting "end" or statement

check "x":
  f(1) is true
  raise("hello") raises "hello"
  raise(1) raises-satisfies is_
4:32:
  |
4 |   raise(1) raises-satisfies is_
  |                                ^
unexpected end of input
expecting "end" or statement

check "x":
  f(1) is true
  raise("hello") raises "hello"
  raise(1) raises-satisfies is
4:31:
  |
4 |   raise(1) raises-satisfies is
  |                               ^
unexpected end of input
expecting "end" or statement

check "x":
  f(1) is true
  raise("hello") raises "hello"
  raise(1) raises-satisfies i
4:30:
  |
4 |   raise(1) raises-satisfies i
  |                              ^
unexpected end of input
expecting "end" or statement

check "x":
  f(1) is true
  raise("hello") raises "hello"
  raise(1) raises-satisfies 
4:29:
  |
4 |   raise(1) raises-satisfies 
  |                             ^
unexpected end of input
expecting expression

check "x":
  f(1) is true
  raise("hello") raises "hello"
  raise(1) raises-satisfie
4:27:
  |
4 |   raise(1) raises-satisfie
  |                           ^
unexpected end of input
expecting ":=", "end", '=', or statement

check "x":
  f(1) is true
  raise("hello") raises "hello"
  raise(1) raises-satisfi
4:26:
  |
4 |   raise(1) raises-satisfi
  |                          ^
unexpected end of input
expecting ":=", "end", '=', or statement

check "x":
  f(1) is true
  raise("hello") raises "hello"
  raise(1) raises-satisf
4:25:
  |
4 |   raise(1) raises-satisf
  |                         ^
unexpected end of input
expecting ":=", "end", '=', or statement

check "x":
  f(1) is true
  raise("hello") raises "hello"
  raise(1) raises-satis
4:24:
  |
4 |   raise(1) raises-satis
  |                        ^
unexpected end of input
expecting ":=", "end", '=', or statement

check "x":
  f(1) is true
  raise("hello") raises "hello"
  raise(1) raises-sati
4:23:
  |
4 |   raise(1) raises-sati
  |                       ^
unexpected end of input
expecting ":=", "end", '=', or statement

check "x":
  f(1) is true
  raise("hello") raises "hello"
  raise(1) raises-sat
4:22:
  |
4 |   raise(1) raises-sat
  |                      ^
unexpected end of input
expecting ":=", "end", '=', or statement

check "x":
  f(1) is true
  raise("hello") raises "hello"
  raise(1) raises-sa
4:21:
  |
4 |   raise(1) raises-sa
  |                     ^
unexpected end of input
expecting ":=", "end", '=', or statement

check "x":
  f(1) is true
  raise("hello") raises "hello"
  raise(1) raises-s
4:20:
  |
4 |   raise(1) raises-s
  |                    ^
unexpected end of input
expecting ":=", "end", '=', or statement

check "x":
  f(1) is true
  raise("hello") raises "hello"
  raise(1) raises-
4:19:
  |
4 |   raise(1) raises-
  |                   ^
unexpected end of input
expecting ":=", "end", '=', or statement

check "x":
  f(1) is true
  raise("hello") raises "hello"
  raise(1) raises
4:18:
  |
4 |   raise(1) raises
  |                  ^
unexpected end of input
expecting expression

check "x":
  f(1) is true
  raise("hello") raises "hello"
  raise(1) raise
4:17:
  |
4 |   raise(1) raise
  |                 ^
unexpected end of input
expecting ":=", "end", '=', or statement

check "x":
  f(1) is true
  raise("hello") raises "hello"
  raise(1) rais
4:16:
  |
4 |   raise(1) rais
  |                ^
unexpected end of input
expecting ":=", "end", '=', or statement

check "x":
  f(1) is true
  raise("hello") raises "hello"
  raise(1) rai
4:15:
  |
4 |   raise(1) rai
  |               ^
unexpected end of input
expecting ":=", "end", '=', or statement

check "x":
  f(1) is true
  raise("hello") raises "hello"
  raise(1) ra
4:14:
  |
4 |   raise(1) ra
  |              ^
unexpected end of input
expecting ":=", "end", '=', or statement

check "x":
  f(1) is true
  raise("hello") raises "hello"
  raise(1) r
4:13:
  |
4 |   raise(1) r
  |             ^
unexpected end of input
expecting ":=", "end", '=', or statement

check "x":
  f(1) is true
  raise("hello") raises "hello"
  raise(1) 
4:12:
  |
4 |   raise(1) 
  |            ^
unexpected end of input
expecting "end" or statement

check "x":
  f(1) is true
  raise("hello") raises "hello"
  raise(1
4:10:
  |
4 |   raise(1
  |          ^
unexpected end of input
expecting ')' or ','

check "x":
  f(1) is true
  raise("hello") raises "hello"
  raise(
4:9:
  |
4 |   raise(
  |         ^
unexpected end of input
expecting ')' or expression

check "x":
  f(1) is true
  raise("hello") raises "hello"
  raise
4:8:
  |
4 |   raise
  |        ^
unexpected end of input
expecting ":=", "end", '=', or statement

check "x":
  f(1) is true
  raise("hello") raises "hello"
  rais
4:7:
  |
4 |   rais
  |       ^
unexpected end of input
expecting ":=", "end", '=', or statement

check "x":
  f(1) is true
  raise("hello") raises "hello"
  rai
4:6:
  |
4 |   rai
  |      ^
unexpected end of input
expecting ":=", "end", '=', or statement

check "x":
  f(1) is true
  raise("hello") raises "hello"
  ra
4:5:
  |
4 |   ra
  |     ^
unexpected end of input
expecting ":=", "end", '=', or statement

check "x":
  f(1) is true
  raise("hello") raises "hello"
  r
4:4:
  |
4 |   r
  |    ^
unexpected end of input
expecting ":=", "end", '=', or statement

check "x":
  f(1) is true
  raise("hello") raises "hello"
  
4:3:
  |
4 |   
  |   ^
unexpected end of input
expecting "end" or statement

check "x":
  f(1) is true
  raise("hello") raises "hello
3:31:
  |
3 |   raise("hello") raises "hello
  |                               ^
unexpected end of input
expecting '"'

check "x":
  f(1) is true
  raise("hello") raises "hell
3:30:
  |
3 |   raise("hello") raises "hell
  |                              ^
unexpected end of input
expecting '"'

check "x":
  f(1) is true
  raise("hello") raises "hel
3:29:
  |
3 |   raise("hello") raises "hel
  |                             ^
unexpected end of input
expecting '"'

check "x":
  f(1) is true
  raise("hello") raises "he
3:28:
  |
3 |   raise("hello") raises "he
  |                            ^
unexpected end of input
expecting '"'

check "x":
  f(1) is true
  raise("hello") raises "h
3:27:
  |
3 |   raise("hello") raises "h
  |                           ^
unexpected end of input
expecting '"'

check "x":
  f(1) is true
  raise("hello") raises "
3:26:
  |
3 |   raise("hello") raises "
  |                          ^
unexpected end of input
expecting '"'

check "x":
  f(1) is true
  raise("hello") raises 
3:25:
  |
3 |   raise("hello") raises 
  |                         ^
unexpected end of input
expecting expression

check "x":
  f(1) is true
  raise("hello") raise
3:23:
  |
3 |   raise("hello") raise
  |                       ^
unexpected end of input
expecting ":=", "end", '=', or statement

check "x":
  f(1) is true
  raise("hello") rais
3:22:
  |
3 |   raise("hello") rais
  |                      ^
unexpected end of input
expecting ":=", "end", '=', or statement

check "x":
  f(1) is true
  raise("hello") rai
3:21:
  |
3 |   raise("hello") rai
  |                     ^
unexpected end of input
expecting ":=", "end", '=', or statement

check "x":
  f(1) is true
  raise("hello") ra
3:20:
  |
3 |   raise("hello") ra
  |                    ^
unexpected end of input
expecting ":=", "end", '=', or statement

check "x":
  f(1) is true
  raise("hello") r
3:19:
  |
3 |   raise("hello") r
  |                   ^
unexpected end of input
expecting ":=", "end", '=', or statement

check "x":
  f(1) is true
  raise("hello") 
3:18:
  |
3 |   raise("hello") 
  |                  ^
unexpected end of input
expecting "end" or statement

check "x":
  f(1) is true
  raise("hello"
3:16:
  |
3 |   raise("hello"
  |                ^
unexpected end of input
expecting ')' or ','

check "x":
  f(1) is true
  raise("hello
3:15:
  |
3 |   raise("hello
  |               ^
unexpected end of input
expecting '"'

check "x":
  f(1) is true
  raise("hell
3:14:
  |
3 |   raise("hell
  |              ^
unexpected end of input
expecting '"'

check "x":
  f(1) is true
  raise("hel
3:13:
  |
3 |   raise("hel
  |             ^
unexpected end of input
expecting '"'

check "x":
  f(1) is true
  raise("he
3:12:
  |
3 |   raise("he
  |            ^
unexpected end of input
expecting '"'

check "x":
  f(1) is true
  raise("h
3:11:
  |
3 |   raise("h
  |           ^
unexpected end of input
expecting '"'

check "x":
  f(1) is true
  raise("
3:10:
  |
3 |   raise("
  |          ^
unexpected end of input
expecting '"'

check "x":
  f(1) is true
  raise(
3:9:
  |
3 |   raise(
  |         ^
unexpected end of input
expecting ')' or expression

check "x":
  f(1) is true
  raise
3:8:
  |
3 |   raise
  |        ^
unexpected end of input
expecting ":=", "end", '=', or statement

check "x":
  f(1) is true
  rais
3:7:
  |
3 |   rais
  |       ^
unexpected end of input
expecting ":=", "end", '=', or statement

check "x":
  f(1) is true
  rai
3:6:
  |
3 |   rai
  |      ^
unexpected end of input
expecting ":=", "end", '=', or statement

check "x":
  f(1) is true
  ra
3:5:
  |
3 |   ra
  |     ^
unexpected end of input
expecting ":=", "end", '=', or statement

check "x":
  f(1) is true
  r
3:4:
  |
3 |   r
  |    ^
unexpected end of input
expecting ":=", "end", '=', or statement

check "x":
  f(1) is true
  
3:3:
  |
3 |   
  |   ^
unexpected end of input
expecting "end" or statement

check "x":
  f(1) is tru
2:14:
  |
2 |   f(1) is tru
  |              ^
unexpected end of input
expecting "end" or statement

check "x":
  f(1) is tr
2:13:
  |
2 |   f(1) is tr
  |             ^
unexpected end of input
expecting "end" or statement

check "x":
  f(1) is t
2:12:
  |
2 |   f(1) is t
  |            ^
unexpected end of input
expecting "end" or statement

check "x":
  f(1) is 
2:11:
  |
2 |   f(1) is 
  |           ^
unexpected end of input
expecting expression

check "x":
  f(1) i
2:9:
  |
2 |   f(1) i
  |         ^
unexpected end of input
expecting ":=", "end", '=', or statement

check "x":
  f(1) 
2:8:
  |
2 |   f(1) 
  |        ^
unexpected end of input
expecting "end" or statement

check "x":
  f(1
2:6:
  |
2 |   f(1
  |      ^
unexpected end of input
expecting ')' or ','

check "x":
  f(
2:5:
  |
2 |   f(
  |     ^
unexpected end of input
expecting ')' or expression

check "x":
  f
2:4:
  |
2 |   f
  |    ^
unexpected end of input
expecting ":=", "end", '=', or statement

check "x":
  
2:3:
  |
2 |   
  |   ^
unexpected end of input
expecting "end" or statement

check "x"
1:10:
  |
1 | check "x"
  |          ^
unexpected end of input
expecting ':'

check "x
1:9:
  |
1 | check "x
  |         ^
unexpected end of input
expecting '"'

check "
1:8:
  |
1 | check "
  |        ^
unexpected end of input
expecting '"'

check 
1:7:
  |
1 | check 
  |       ^
unexpected end of input
expecting ':' or check block name

chec OK
che OK
ch OK
c OK

{a:1,b:2}
{a,b}
2:3:
  |
2 | {a,b}
  |   ^
unexpected ','
expecting ':', ';', or '}'

^^^^^^^^^^^^^^^^^^^^^^^
{a:1,b:2}
{a,b
2:3:
  |
2 | {a,b
  |   ^
unexpected ','
expecting ':', ';', or '}'

^^^^^^^^^^^^^^^^^^^^^^^
{a:1,b:2}
{a,
2:3:
  |
2 | {a,
  |   ^
unexpected ','
expecting ':', ';', or '}'

^^^^^^^^^^^^^^^^^^^^^^^
{a:1,b:2}
{a
2:3:
  |
2 | {a
  |   ^
unexpected end of input
expecting ':', ';', or '}'

{a:1,b:2}
{
2:2:
  |
2 | {
  |  ^
unexpected end of input
expecting '}' or expression

{a:1,b:2}
 OK
{a:1,b:2
1:9:
  |
1 | {a:1,b:2
  |         ^
unexpected end of input
expecting ',' or '}'

{a:1,b:
1:8:
  |
1 | {a:1,b:
  |        ^
unexpected end of input
expecting expression

{a:1,b
1:7:
  |
1 | {a:1,b
  |       ^
unexpected end of input
expecting ':'

{a:1,
1:6:
  |
1 | {a:1,
  |      ^
unexpected end of input
expecting '}' or identifier

{a:1
1:5:
  |
1 | {a:1
  |     ^
unexpected end of input
expecting ',' or '}'

{a:
1:4:
  |
1 | {a:
  |    ^
unexpected end of input
expecting expression

{a
1:3:
  |
1 | {a
  |   ^
unexpected end of input
expecting ':', ';', or '}'

{
1:2:
  |
1 | {
  |  ^
unexpected end of input
expecting '}' or expression


