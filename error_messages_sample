ask:
  | x == 0 then: 1
  | x > 0 then: x
  | otherwise: x * -1
end OK
ask:
  | x == 0 then: 1
  | x > 0 then: x
  | otherwise: x * -1
e
5:1:
  |
5 | e
  | ^
unexpected 'e'
expecting "end"

^^^^^^^^^^^^^^^^^^^^^^^
ask:
  | x == 0 then: 1
  | x > 0 then: x
  | otherwise: x * -1
4:22:
  |
4 |   | otherwise: x * -1
  |                      ^
unexpected end of input
expecting "end"

ask:
  | x == 0 then: 1
  | x > 0 then: x
  | otherwise: x * 
4:20:
  |
4 |   | otherwise: x * 
  |                    ^
unexpected end of input
expecting expression

ask:
  | x == 0 then: 1
  | x > 0 then: x
  | otherwise: x
4:17:
  |
4 |   | otherwise: x
  |                 ^
unexpected end of input
expecting "end"

ask:
  | x == 0 then: 1
  | x > 0 then: x
  | otherwise:
4:15:
  |
4 |   | otherwise:
  |               ^
unexpected end of input
expecting expression

ask:
  | x == 0 then: 1
  | x > 0 then: x
  | otherwis
4:13:
  |
4 |   | otherwis
  |             ^
unexpected end of input
expecting "then"

ask:
  | x == 0 then: 1
  | x > 0 then: x
  | otherw
4:11:
  |
4 |   | otherw
  |           ^
unexpected end of input
expecting "then"

ask:
  | x == 0 then: 1
  | x > 0 then: x
  | othe
4:9:
  |
4 |   | othe
  |         ^
unexpected end of input
expecting "then"

ask:
  | x == 0 then: 1
  | x > 0 then: x
  | ot
4:7:
  |
4 |   | ot
  |       ^
unexpected end of input
expecting "then"

ask:
  | x == 0 then: 1
  | x > 0 then: x
  | 
4:5:
  |
4 |   | 
  |     ^
unexpected end of input
expecting "otherwise" or expression

ask:
  | x == 0 then: 1
  | x > 0 then: x
 
4:2:
  |
4 |  
  |  ^
unexpected end of input
expecting "end" or '|'

ask:
  | x == 0 then: 1
  | x > 0 then:
3:16:
  |
3 |   | x > 0 then:
  |                ^
unexpected end of input
expecting expression

ask:
  | x == 0 then: 1
  | x > 0 the
3:11:
  |
3 |   | x > 0 the
  |           ^^^
unexpected "the"
expecting "then"

^^^^^^^^^^^^^^^^^^^^^^^
ask:
  | x == 0 then: 1
  | x > 0 t
3:11:
  |
3 |   | x > 0 t
  |           ^
unexpected 't'
expecting "then"

^^^^^^^^^^^^^^^^^^^^^^^
ask:
  | x == 0 then: 1
  | x > 0
3:10:
  |
3 |   | x > 0
  |          ^
unexpected end of input
expecting "then"

ask:
  | x == 0 then: 1
  | x >
3:8:
  |
3 |   | x >
  |        ^
unexpected end of input
expecting expression

ask:
  | x == 0 then: 1
  | x
3:6:
  |
3 |   | x
  |      ^
unexpected end of input
expecting "then"

ask:
  | x == 0 then: 1
  |
3:4:
  |
3 |   |
  |    ^
unexpected end of input
expecting "otherwise" or expression

ask:
  | x == 0 then: 1
 
3:2:
  |
3 |  
  |  ^
unexpected end of input
expecting "end" or '|'

ask:
  | x == 0 then:
2:17:
  |
2 |   | x == 0 then:
  |                 ^
unexpected end of input
expecting expression

ask:
  | x == 0 the
2:12:
  |
2 |   | x == 0 the
  |            ^^^
unexpected "the"
expecting "then"

^^^^^^^^^^^^^^^^^^^^^^^
ask:
  | x == 0 t
2:12:
  |
2 |   | x == 0 t
  |            ^
unexpected 't'
expecting "then"

^^^^^^^^^^^^^^^^^^^^^^^
ask:
  | x == 0
2:11:
  |
2 |   | x == 0
  |           ^
unexpected end of input
expecting "then"

ask:
  | x ==
2:9:
  |
2 |   | x ==
  |         ^
unexpected end of input
expecting expression

ask:
  | x 
2:7:
  |
2 |   | x 
  |       ^
unexpected end of input
expecting "then"

ask:
  |
2:4:
  |
2 |   |
  |    ^
unexpected end of input
expecting "otherwise" or expression

ask:
 
2:2:
  |
2 |  
  |  ^
unexpected end of input
expecting "end" or '|'

as
1:1:
  |
1 | as
  | ^
unexpected 'a'
expecting "import", "include", or "provide"

^^^^^^^^^^^^^^^^^^^^^^^

cases (Two) a:
  | pt1(x,y) => if n == 0: x else: y end
  | pt2(x,y) => if n == 0: x else: y end
end OK
cases (Two) a:
  | pt1(x,y) => if n == 0: x else: y end
  | pt2(x,y) => if n == 0: x else: y end
e
4:1:
  |
4 | e
  | ^
unexpected 'e'
expecting "end" or '|'

^^^^^^^^^^^^^^^^^^^^^^^
cases (Two) a:
  | pt1(x,y) => if n == 0: x else: y end
  | pt2(x,y) => if n == 0: x else: y end
3:41:
  |
3 |   | pt2(x,y) => if n == 0: x else: y end
  |                                         ^
unexpected end of input
expecting "end" or '|'

cases (Two) a:
  | pt1(x,y) => if n == 0: x else: y end
  | pt2(x,y) => if n == 0: x else: y e
3:38:
  |
3 |   | pt2(x,y) => if n == 0: x else: y e
  |                                      ^
unexpected 'e'
expecting "end"

^^^^^^^^^^^^^^^^^^^^^^^
cases (Two) a:
  | pt1(x,y) => if n == 0: x else: y end
  | pt2(x,y) => if n == 0: x else: y
3:37:
  |
3 |   | pt2(x,y) => if n == 0: x else: y
  |                                     ^
unexpected end of input
expecting "end"

cases (Two) a:
  | pt1(x,y) => if n == 0: x else: y end
  | pt2(x,y) => if n == 0: x else:
3:35:
  |
3 |   | pt2(x,y) => if n == 0: x else:
  |                                   ^
unexpected end of input
expecting expression

cases (Two) a:
  | pt1(x,y) => if n == 0: x else: y end
  | pt2(x,y) => if n == 0: x els
3:30:
  |
3 |   | pt2(x,y) => if n == 0: x els
  |                              ^^^
unexpected "els"
expecting "else" or "end"

^^^^^^^^^^^^^^^^^^^^^^^
cases (Two) a:
  | pt1(x,y) => if n == 0: x else: y end
  | pt2(x,y) => if n == 0: x e
3:30:
  |
3 |   | pt2(x,y) => if n == 0: x e
  |                              ^
unexpected 'e'
expecting "else" or "end"

^^^^^^^^^^^^^^^^^^^^^^^
cases (Two) a:
  | pt1(x,y) => if n == 0: x else: y end
  | pt2(x,y) => if n == 0: x
3:29:
  |
3 |   | pt2(x,y) => if n == 0: x
  |                             ^
unexpected end of input
expecting "else" or "end"

cases (Two) a:
  | pt1(x,y) => if n == 0: x else: y end
  | pt2(x,y) => if n == 0:
3:27:
  |
3 |   | pt2(x,y) => if n == 0:
  |                           ^
unexpected end of input
expecting expression

cases (Two) a:
  | pt1(x,y) => if n == 0: x else: y end
  | pt2(x,y) => if n == 
3:25:
  |
3 |   | pt2(x,y) => if n == 
  |                         ^
unexpected end of input
expecting expression

cases (Two) a:
  | pt1(x,y) => if n == 0: x else: y end
  | pt2(x,y) => if n 
3:22:
  |
3 |   | pt2(x,y) => if n 
  |                      ^
unexpected end of input
expecting ':'

cases (Two) a:
  | pt1(x,y) => if n == 0: x else: y end
  | pt2(x,y) => if
3:19:
  |
3 |   | pt2(x,y) => if
  |                   ^
unexpected end of input
expecting expression

cases (Two) a:
  | pt1(x,y) => if n == 0: x else: y end
  | pt2(x,y) => 
3:17:
  |
3 |   | pt2(x,y) => 
  |                 ^
unexpected end of input
expecting expression

cases (Two) a:
  | pt1(x,y) => if n == 0: x else: y end
  | pt2(x,y) 
3:14:
  |
3 |   | pt2(x,y) 
  |              ^
unexpected end of input
expecting "=>"

cases (Two) a:
  | pt1(x,y) => if n == 0: x else: y end
  | pt2(x,
3:11:
  |
3 |   | pt2(x,
  |           ^
unexpected end of input
expecting identifier

cases (Two) a:
  | pt1(x,y) => if n == 0: x else: y end
  | pt2(
3:9:
  |
3 |   | pt2(
  |         ^
unexpected end of input
expecting ')' or identifier

cases (Two) a:
  | pt1(x,y) => if n == 0: x else: y end
  | pt
3:7:
  |
3 |   | pt
  |       ^
unexpected end of input
expecting "=>"

cases (Two) a:
  | pt1(x,y) => if n == 0: x else: y end
  | 
3:5:
  |
3 |   | 
  |     ^
unexpected end of input
expecting "else" or pattern

cases (Two) a:
  | pt1(x,y) => if n == 0: x else: y end
 
3:2:
  |
3 |  
  |  ^
unexpected end of input
expecting "end" or '|'

cases (Two) a:
  | pt1(x,y) => if n == 0: x else: y e
2:38:
  |
2 |   | pt1(x,y) => if n == 0: x else: y e
  |                                      ^
unexpected 'e'
expecting "end"

^^^^^^^^^^^^^^^^^^^^^^^
cases (Two) a:
  | pt1(x,y) => if n == 0: x else: y
2:37:
  |
2 |   | pt1(x,y) => if n == 0: x else: y
  |                                     ^
unexpected end of input
expecting "end"

cases (Two) a:
  | pt1(x,y) => if n == 0: x else:
2:35:
  |
2 |   | pt1(x,y) => if n == 0: x else:
  |                                   ^
unexpected end of input
expecting expression

cases (Two) a:
  | pt1(x,y) => if n == 0: x els
2:30:
  |
2 |   | pt1(x,y) => if n == 0: x els
  |                              ^^^
unexpected "els"
expecting "else" or "end"

^^^^^^^^^^^^^^^^^^^^^^^
cases (Two) a:
  | pt1(x,y) => if n == 0: x e
2:30:
  |
2 |   | pt1(x,y) => if n == 0: x e
  |                              ^
unexpected 'e'
expecting "else" or "end"

^^^^^^^^^^^^^^^^^^^^^^^
cases (Two) a:
  | pt1(x,y) => if n == 0: x
2:29:
  |
2 |   | pt1(x,y) => if n == 0: x
  |                             ^
unexpected end of input
expecting "else" or "end"

cases (Two) a:
  | pt1(x,y) => if n == 0:
2:27:
  |
2 |   | pt1(x,y) => if n == 0:
  |                           ^
unexpected end of input
expecting expression

cases (Two) a:
  | pt1(x,y) => if n == 
2:25:
  |
2 |   | pt1(x,y) => if n == 
  |                         ^
unexpected end of input
expecting expression

cases (Two) a:
  | pt1(x,y) => if n 
2:22:
  |
2 |   | pt1(x,y) => if n 
  |                      ^
unexpected end of input
expecting ':'

cases (Two) a:
  | pt1(x,y) => if
2:19:
  |
2 |   | pt1(x,y) => if
  |                   ^
unexpected end of input
expecting expression

cases (Two) a:
  | pt1(x,y) => 
2:17:
  |
2 |   | pt1(x,y) => 
  |                 ^
unexpected end of input
expecting expression

cases (Two) a:
  | pt1(x,y) 
2:14:
  |
2 |   | pt1(x,y) 
  |              ^
unexpected end of input
expecting "=>"

cases (Two) a:
  | pt1(x,
2:11:
  |
2 |   | pt1(x,
  |           ^
unexpected end of input
expecting identifier

cases (Two) a:
  | pt1(
2:9:
  |
2 |   | pt1(
  |         ^
unexpected end of input
expecting ')' or identifier

cases (Two) a:
  | pt
2:7:
  |
2 |   | pt
  |       ^
unexpected end of input
expecting "=>"

cases (Two) a:
  | 
2:5:
  |
2 |   | 
  |     ^
unexpected end of input
expecting "else" or pattern

cases (Two) a:
 
2:2:
  |
2 |  
  |  ^
unexpected end of input
expecting "end" or '|'

cases (Two) 
1:13:
  |
1 | cases (Two) 
  |             ^
unexpected end of input
expecting expression

cases (Tw
1:10:
  |
1 | cases (Tw
  |          ^
unexpected end of input
expecting ')'

cases (
1:8:
  |
1 | cases (
  |        ^
unexpected end of input
expecting identifier

cases
1:6:
  |
1 | cases
  |      ^
unexpected end of input
expecting '('

cas OK
c OK

example2 = {
  make: lam(args): link(42,args) end,
  make8: lam(a,b,c,d,e,f,g,h): [list: 8,a,b,c,d,e,f,g,h] end
} OK
example2 = {
  make: lam(args): link(42,args) end,
  make8: lam(a,b,c,d,e,f,g,h): [list: 8,a,b,c,d,e,f,g,h] end
3:61:
  |
3 |   make8: lam(a,b,c,d,e,f,g,h): [list: 8,a,b,c,d,e,f,g,h] end
  |                                                             ^
unexpected end of input
expecting ',' or '}'

example2 = {
  make: lam(args): link(42,args) end,
  make8: lam(a,b,c,d,e,f,g,h): [list: 8,a,b,c,d,e,f,g,h] e
3:58:
  |
3 |   make8: lam(a,b,c,d,e,f,g,h): [list: 8,a,b,c,d,e,f,g,h] e
  |                                                          ^
unexpected 'e'
expecting "end"

^^^^^^^^^^^^^^^^^^^^^^^
example2 = {
  make: lam(args): link(42,args) end,
  make8: lam(a,b,c,d,e,f,g,h): [list: 8,a,b,c,d,e,f,g,h]
3:57:
  |
3 |   make8: lam(a,b,c,d,e,f,g,h): [list: 8,a,b,c,d,e,f,g,h]
  |                                                         ^
unexpected end of input
expecting "end"

example2 = {
  make: lam(args): link(42,args) end,
  make8: lam(a,b,c,d,e,f,g,h): [list: 8,a,b,c,d,e,f,g,
3:55:
  |
3 |   make8: lam(a,b,c,d,e,f,g,h): [list: 8,a,b,c,d,e,f,g,
  |                                                       ^
unexpected end of input
expecting expression

example2 = {
  make: lam(args): link(42,args) end,
  make8: lam(a,b,c,d,e,f,g,h): [list: 8,a,b,c,d,e,f,
3:53:
  |
3 |   make8: lam(a,b,c,d,e,f,g,h): [list: 8,a,b,c,d,e,f,
  |                                                     ^
unexpected end of input
expecting expression

example2 = {
  make: lam(args): link(42,args) end,
  make8: lam(a,b,c,d,e,f,g,h): [list: 8,a,b,c,d,e,
3:51:
  |
3 |   make8: lam(a,b,c,d,e,f,g,h): [list: 8,a,b,c,d,e,
  |                                                   ^
unexpected end of input
expecting expression

example2 = {
  make: lam(args): link(42,args) end,
  make8: lam(a,b,c,d,e,f,g,h): [list: 8,a,b,c,d,
3:49:
  |
3 |   make8: lam(a,b,c,d,e,f,g,h): [list: 8,a,b,c,d,
  |                                                 ^
unexpected end of input
expecting expression

example2 = {
  make: lam(args): link(42,args) end,
  make8: lam(a,b,c,d,e,f,g,h): [list: 8,a,b,c,
3:47:
  |
3 |   make8: lam(a,b,c,d,e,f,g,h): [list: 8,a,b,c,
  |                                               ^
unexpected end of input
expecting expression

example2 = {
  make: lam(args): link(42,args) end,
  make8: lam(a,b,c,d,e,f,g,h): [list: 8,a,b,
3:45:
  |
3 |   make8: lam(a,b,c,d,e,f,g,h): [list: 8,a,b,
  |                                             ^
unexpected end of input
expecting expression

example2 = {
  make: lam(args): link(42,args) end,
  make8: lam(a,b,c,d,e,f,g,h): [list: 8,a,
3:43:
  |
3 |   make8: lam(a,b,c,d,e,f,g,h): [list: 8,a,
  |                                           ^
unexpected end of input
expecting expression

example2 = {
  make: lam(args): link(42,args) end,
  make8: lam(a,b,c,d,e,f,g,h): [list: 8,
3:41:
  |
3 |   make8: lam(a,b,c,d,e,f,g,h): [list: 8,
  |                                         ^
unexpected end of input
expecting expression

example2 = {
  make: lam(args): link(42,args) end,
  make8: lam(a,b,c,d,e,f,g,h): [list: 
3:39:
  |
3 |   make8: lam(a,b,c,d,e,f,g,h): [list: 
  |                                       ^
unexpected end of input
expecting ']' or expression

example2 = {
  make: lam(args): link(42,args) end,
  make8: lam(a,b,c,d,e,f,g,h): [lis
3:36:
  |
3 |   make8: lam(a,b,c,d,e,f,g,h): [lis
  |                                    ^
unexpected end of input
expecting ':'

example2 = {
  make: lam(args): link(42,args) end,
  make8: lam(a,b,c,d,e,f,g,h): [l
3:34:
  |
3 |   make8: lam(a,b,c,d,e,f,g,h): [l
  |                                  ^
unexpected end of input
expecting ':'

example2 = {
  make: lam(args): link(42,args) end,
  make8: lam(a,b,c,d,e,f,g,h): 
3:32:
  |
3 |   make8: lam(a,b,c,d,e,f,g,h): 
  |                                ^
unexpected end of input
expecting expression

example2 = {
  make: lam(args): link(42,args) end,
  make8: lam(a,b,c,d,e,f,g,h
3:29:
  |
3 |   make8: lam(a,b,c,d,e,f,g,h
  |                             ^
unexpected end of input
expecting ')' or ','

example2 = {
  make: lam(args): link(42,args) end,
  make8: lam(a,b,c,d,e,f,g
3:27:
  |
3 |   make8: lam(a,b,c,d,e,f,g
  |                           ^
unexpected end of input
expecting ')' or ','

example2 = {
  make: lam(args): link(42,args) end,
  make8: lam(a,b,c,d,e,f
3:25:
  |
3 |   make8: lam(a,b,c,d,e,f
  |                         ^
unexpected end of input
expecting ')' or ','

example2 = {
  make: lam(args): link(42,args) end,
  make8: lam(a,b,c,d,e
3:23:
  |
3 |   make8: lam(a,b,c,d,e
  |                       ^
unexpected end of input
expecting ')' or ','

example2 = {
  make: lam(args): link(42,args) end,
  make8: lam(a,b,c,d
3:21:
  |
3 |   make8: lam(a,b,c,d
  |                     ^
unexpected end of input
expecting ')' or ','

example2 = {
  make: lam(args): link(42,args) end,
  make8: lam(a,b,c
3:19:
  |
3 |   make8: lam(a,b,c
  |                   ^
unexpected end of input
expecting ')' or ','

example2 = {
  make: lam(args): link(42,args) end,
  make8: lam(a,b
3:17:
  |
3 |   make8: lam(a,b
  |                 ^
unexpected end of input
expecting ')' or ','

example2 = {
  make: lam(args): link(42,args) end,
  make8: lam(a
3:15:
  |
3 |   make8: lam(a
  |               ^
unexpected end of input
expecting ')' or ','

example2 = {
  make: lam(args): link(42,args) end,
  make8: lam
3:13:
  |
3 |   make8: lam
  |             ^
unexpected end of input
expecting '('

example2 = {
  make: lam(args): link(42,args) end,
  make8: l
3:11:
  |
3 |   make8: l
  |           ^
unexpected end of input
expecting ',' or '}'

example2 = {
  make: lam(args): link(42,args) end,
  make8:
3:9:
  |
3 |   make8:
  |         ^
unexpected end of input
expecting expression

example2 = {
  make: lam(args): link(42,args) end,
  make
3:7:
  |
3 |   make
  |       ^
unexpected end of input
expecting ':'

example2 = {
  make: lam(args): link(42,args) end,
  ma
3:5:
  |
3 |   ma
  |     ^
unexpected end of input
expecting ':'

example2 = {
  make: lam(args): link(42,args) end,
  
3:3:
  |
3 |   
  |   ^
unexpected end of input
expecting '}' or identifier

example2 = {
  make: lam(args): link(42,args) en
2:34:
  |
2 |   make: lam(args): link(42,args) en
  |                                  ^^
unexpected "en"
expecting "end"

^^^^^^^^^^^^^^^^^^^^^^^
example2 = {
  make: lam(args): link(42,args) 
2:34:
  |
2 |   make: lam(args): link(42,args) 
  |                                  ^
unexpected end of input
expecting "end"

example2 = {
  make: lam(args): link(42,arg
2:31:
  |
2 |   make: lam(args): link(42,arg
  |                               ^
unexpected end of input
expecting ')' or ','

example2 = {
  make: lam(args): link(42,a
2:29:
  |
2 |   make: lam(args): link(42,a
  |                             ^
unexpected end of input
expecting ')' or ','

example2 = {
  make: lam(args): link(42
2:27:
  |
2 |   make: lam(args): link(42
  |                           ^
unexpected end of input
expecting ')' or ','

example2 = {
  make: lam(args): link(
2:25:
  |
2 |   make: lam(args): link(
  |                         ^
unexpected end of input
expecting ')' or expression

example2 = {
  make: lam(args): lin
2:23:
  |
2 |   make: lam(args): lin
  |                       ^
unexpected end of input
expecting "end"

example2 = {
  make: lam(args): l
2:21:
  |
2 |   make: lam(args): l
  |                     ^
unexpected end of input
expecting "end"

example2 = {
  make: lam(args):
2:19:
  |
2 |   make: lam(args):
  |                   ^
unexpected end of input
expecting expression

example2 = {
  make: lam(args
2:17:
  |
2 |   make: lam(args
  |                 ^
unexpected end of input
expecting ')' or ','

example2 = {
  make: lam(ar
2:15:
  |
2 |   make: lam(ar
  |               ^
unexpected end of input
expecting ')' or ','

example2 = {
  make: lam(
2:13:
  |
2 |   make: lam(
  |             ^
unexpected end of input
expecting ')' or identifier

example2 = {
  make: la
2:11:
  |
2 |   make: la
  |           ^
unexpected end of input
expecting ',' or '}'

example2 = {
  make: 
2:9:
  |
2 |   make: 
  |         ^
unexpected end of input
expecting expression

example2 = {
  mak
2:6:
  |
2 |   mak
  |      ^
unexpected end of input
expecting ':', ';', or '}'

example2 = {
  m
2:4:
  |
2 |   m
  |    ^
unexpected end of input
expecting ':', ';', or '}'

example2 = {
 
2:2:
  |
2 |  
  |  ^
unexpected end of input
expecting '}' or expression

example2 =
1:11:
  |
1 | example2 =
  |           ^
unexpected end of input
expecting expression

example2 OK
exampl OK
exam OK
ex OK

fun apply-twice(f, x):
  f(f(x))
where:
  apply-twice(square, 3) is 81
end OK
fun apply-twice(f, x):
  f(f(x))
where:
  apply-twice(square, 3) is 81
e
5:2:
  |
5 | e
  |  ^
unexpected end of input
expecting "end", '=', or statement

fun apply-twice(f, x):
  f(f(x))
where:
  apply-twice(square, 3) is 81
4:31:
  |
4 |   apply-twice(square, 3) is 81
  |                               ^
unexpected end of input
expecting "end"

fun apply-twice(f, x):
  f(f(x))
where:
  apply-twice(square, 3) is 
4:29:
  |
4 |   apply-twice(square, 3) is 
  |                             ^
unexpected end of input
expecting expression

fun apply-twice(f, x):
  f(f(x))
where:
  apply-twice(square, 3) 
4:26:
  |
4 |   apply-twice(square, 3) 
  |                          ^
unexpected end of input
expecting "end"

fun apply-twice(f, x):
  f(f(x))
where:
  apply-twice(square, 
4:23:
  |
4 |   apply-twice(square, 
  |                       ^
unexpected end of input
expecting expression

fun apply-twice(f, x):
  f(f(x))
where:
  apply-twice(squar
4:20:
  |
4 |   apply-twice(squar
  |                    ^
unexpected end of input
expecting ')' or ','

fun apply-twice(f, x):
  f(f(x))
where:
  apply-twice(squ
4:18:
  |
4 |   apply-twice(squ
  |                  ^
unexpected end of input
expecting ')' or ','

fun apply-twice(f, x):
  f(f(x))
where:
  apply-twice(s
4:16:
  |
4 |   apply-twice(s
  |                ^
unexpected end of input
expecting ')' or ','

fun apply-twice(f, x):
  f(f(x))
where:
  apply-twice
4:14:
  |
4 |   apply-twice
  |              ^
unexpected end of input
expecting "end", '=', or statement

fun apply-twice(f, x):
  f(f(x))
where:
  apply-twi
4:12:
  |
4 |   apply-twi
  |            ^
unexpected end of input
expecting "end", '=', or statement

fun apply-twice(f, x):
  f(f(x))
where:
  apply-t
4:10:
  |
4 |   apply-t
  |          ^
unexpected end of input
expecting "end", '=', or statement

fun apply-twice(f, x):
  f(f(x))
where:
  apply
4:8:
  |
4 |   apply
  |        ^
unexpected end of input
expecting "end", '=', or statement

fun apply-twice(f, x):
  f(f(x))
where:
  app
4:6:
  |
4 |   app
  |      ^
unexpected end of input
expecting "end", '=', or statement

fun apply-twice(f, x):
  f(f(x))
where:
  a
4:4:
  |
4 |   a
  |    ^
unexpected end of input
expecting "end", '=', or statement

fun apply-twice(f, x):
  f(f(x))
where:
 
4:2:
  |
4 |  
  |  ^
unexpected end of input
expecting "end"

fun apply-twice(f, x):
  f(f(x))
wher
3:5:
  |
3 | wher
  |     ^
unexpected end of input
expecting ":=", "end", '=', or statement

fun apply-twice(f, x):
  f(f(x))
wh
3:3:
  |
3 | wh
  |   ^
unexpected end of input
expecting ":=", "end", '=', or statement

fun apply-twice(f, x):
  f(f(x))

3:1:
  |
3 | <empty line>
  | ^
unexpected end of input
expecting "end", '=', or statement

fun apply-twice(f, x):
  f(f(x
2:8:
  |
2 |   f(f(x
  |        ^
unexpected end of input
expecting ')' or ','

fun apply-twice(f, x):
  f(f
2:6:
  |
2 |   f(f
  |      ^
unexpected end of input
expecting ')' or ','

fun apply-twice(f, x):
  f
2:4:
  |
2 |   f
  |    ^
unexpected end of input
expecting ":=", "end", '=', or statement

fun apply-twice(f, x):
 
2:2:
  |
2 |  
  |  ^
unexpected end of input
expecting statement

fun apply-twice(f, x
1:21:
  |
1 | fun apply-twice(f, x
  |                     ^
unexpected end of input
expecting ')' or ','

fun apply-twice(f,
1:19:
  |
1 | fun apply-twice(f,
  |                   ^
unexpected end of input
expecting identifier

fun apply-twice(
1:17:
  |
1 | fun apply-twice(
  |                 ^
unexpected end of input
expecting ')' or identifier

fun apply-twic
1:15:
  |
1 | fun apply-twic
  |               ^
unexpected end of input
expecting '('

fun apply-tw
1:13:
  |
1 | fun apply-tw
  |             ^
unexpected end of input
expecting '('

fun apply-
1:11:
  |
1 | fun apply-
  |           ^
unexpected end of input
expecting '('

fun appl
1:9:
  |
1 | fun appl
  |         ^
unexpected end of input
expecting '('

fun ap
1:7:
  |
1 | fun ap
  |       ^
unexpected end of input
expecting '('

fun 
1:5:
  |
1 | fun 
  |     ^
unexpected end of input
expecting identifier

f OK

check "x":
  f(1) is true
  raise("hello") raises "hello"
  raise(1) raises-satisfies is_one
end OK
check "x":
  f(1) is true
  raise("hello") raises "hello"
  raise(1) raises-satisfies is_one
e
5:2:
  |
5 | e
  |  ^
unexpected end of input
expecting ":=", "end", '=', or statement

check "x":
  f(1) is true
  raise("hello") raises "hello"
  raise(1) raises-satisfies is_one
4:35:
  |
4 |   raise(1) raises-satisfies is_one
  |                                   ^
unexpected end of input
expecting "end" or statement

check "x":
  f(1) is true
  raise("hello") raises "hello"
  raise(1) raises-satisfies is_o
4:33:
  |
4 |   raise(1) raises-satisfies is_o
  |                                 ^
unexpected end of input
expecting "end" or statement

check "x":
  f(1) is true
  raise("hello") raises "hello"
  raise(1) raises-satisfies is
4:31:
  |
4 |   raise(1) raises-satisfies is
  |                               ^
unexpected end of input
expecting "end" or statement

check "x":
  f(1) is true
  raise("hello") raises "hello"
  raise(1) raises-satisfies 
4:29:
  |
4 |   raise(1) raises-satisfies 
  |                             ^
unexpected end of input
expecting expression

check "x":
  f(1) is true
  raise("hello") raises "hello"
  raise(1) raises-satisfi
4:26:
  |
4 |   raise(1) raises-satisfi
  |                          ^
unexpected end of input
expecting ":=", "end", '=', or statement

check "x":
  f(1) is true
  raise("hello") raises "hello"
  raise(1) raises-satis
4:24:
  |
4 |   raise(1) raises-satis
  |                        ^
unexpected end of input
expecting ":=", "end", '=', or statement

check "x":
  f(1) is true
  raise("hello") raises "hello"
  raise(1) raises-sat
4:22:
  |
4 |   raise(1) raises-sat
  |                      ^
unexpected end of input
expecting ":=", "end", '=', or statement

check "x":
  f(1) is true
  raise("hello") raises "hello"
  raise(1) raises-s
4:20:
  |
4 |   raise(1) raises-s
  |                    ^
unexpected end of input
expecting ":=", "end", '=', or statement

check "x":
  f(1) is true
  raise("hello") raises "hello"
  raise(1) raises
4:18:
  |
4 |   raise(1) raises
  |                  ^
unexpected end of input
expecting expression

check "x":
  f(1) is true
  raise("hello") raises "hello"
  raise(1) rais
4:16:
  |
4 |   raise(1) rais
  |                ^
unexpected end of input
expecting ":=", "end", '=', or statement

check "x":
  f(1) is true
  raise("hello") raises "hello"
  raise(1) ra
4:14:
  |
4 |   raise(1) ra
  |              ^
unexpected end of input
expecting ":=", "end", '=', or statement

check "x":
  f(1) is true
  raise("hello") raises "hello"
  raise(1) 
4:12:
  |
4 |   raise(1) 
  |            ^
unexpected end of input
expecting "end" or statement

check "x":
  f(1) is true
  raise("hello") raises "hello"
  raise(
4:9:
  |
4 |   raise(
  |         ^
unexpected end of input
expecting ')' or expression

check "x":
  f(1) is true
  raise("hello") raises "hello"
  rais
4:7:
  |
4 |   rais
  |       ^
unexpected end of input
expecting ":=", "end", '=', or statement

check "x":
  f(1) is true
  raise("hello") raises "hello"
  ra
4:5:
  |
4 |   ra
  |     ^
unexpected end of input
expecting ":=", "end", '=', or statement

check "x":
  f(1) is true
  raise("hello") raises "hello"
  
4:3:
  |
4 |   
  |   ^
unexpected end of input
expecting "end" or statement

check "x":
  f(1) is true
  raise("hello") raises "hell
3:30:
  |
3 |   raise("hello") raises "hell
  |                              ^
unexpected end of input
expecting '"'

check "x":
  f(1) is true
  raise("hello") raises "he
3:28:
  |
3 |   raise("hello") raises "he
  |                            ^
unexpected end of input
expecting '"'

check "x":
  f(1) is true
  raise("hello") raises "
3:26:
  |
3 |   raise("hello") raises "
  |                          ^
unexpected end of input
expecting '"'

check "x":
  f(1) is true
  raise("hello") raises
3:24:
  |
3 |   raise("hello") raises
  |                        ^
unexpected end of input
expecting expression

check "x":
  f(1) is true
  raise("hello") rais
3:22:
  |
3 |   raise("hello") rais
  |                      ^
unexpected end of input
expecting ":=", "end", '=', or statement

check "x":
  f(1) is true
  raise("hello") ra
3:20:
  |
3 |   raise("hello") ra
  |                    ^
unexpected end of input
expecting ":=", "end", '=', or statement

check "x":
  f(1) is true
  raise("hello") 
3:18:
  |
3 |   raise("hello") 
  |                  ^
unexpected end of input
expecting "end" or statement

check "x":
  f(1) is true
  raise("hello
3:15:
  |
3 |   raise("hello
  |               ^
unexpected end of input
expecting '"'

check "x":
  f(1) is true
  raise("hel
3:13:
  |
3 |   raise("hel
  |             ^
unexpected end of input
expecting '"'

check "x":
  f(1) is true
  raise("h
3:11:
  |
3 |   raise("h
  |           ^
unexpected end of input
expecting '"'

check "x":
  f(1) is true
  raise(
3:9:
  |
3 |   raise(
  |         ^
unexpected end of input
expecting ')' or expression

check "x":
  f(1) is true
  rais
3:7:
  |
3 |   rais
  |       ^
unexpected end of input
expecting ":=", "end", '=', or statement

check "x":
  f(1) is true
  ra
3:5:
  |
3 |   ra
  |     ^
unexpected end of input
expecting ":=", "end", '=', or statement

check "x":
  f(1) is true
  
3:3:
  |
3 |   
  |   ^
unexpected end of input
expecting "end" or statement

check "x":
  f(1) is tr
2:13:
  |
2 |   f(1) is tr
  |             ^
unexpected end of input
expecting "end" or statement

check "x":
  f(1) is 
2:11:
  |
2 |   f(1) is 
  |           ^
unexpected end of input
expecting expression

check "x":
  f(1) 
2:8:
  |
2 |   f(1) 
  |        ^
unexpected end of input
expecting "end" or statement

check "x":
  f(
2:5:
  |
2 |   f(
  |     ^
unexpected end of input
expecting ')' or expression

check "x":
  
2:3:
  |
2 |   
  |   ^
unexpected end of input
expecting "end" or statement

check "x
1:9:
  |
1 | check "x
  |         ^
unexpected end of input
expecting '"'

check 
1:7:
  |
1 | check 
  |       ^
unexpected end of input
expecting ':' or check block name

che OK
c OK

